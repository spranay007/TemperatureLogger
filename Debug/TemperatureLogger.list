
TemperatureLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004120  08004120  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004120  08004120  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004120  08004120  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004120  08004120  00005120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004124  08004124  00005124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004128  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08004190  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004190  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be18  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9f  00000000  00000000  00011ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00013d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3e  00000000  00000000  00014a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a22  00000000  00000000  0001549e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f70d  00000000  00000000  0002dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c3e4  00000000  00000000  0003d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c99b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  000c99f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cd860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080040c0 	.word	0x080040c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080040c0 	.word	0x080040c0

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2iz>:
 80005bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005c4:	d30f      	bcc.n	80005e6 <__aeabi_f2iz+0x2a>
 80005c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d90d      	bls.n	80005ec <__aeabi_f2iz+0x30>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005d8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005dc:	fa23 f002 	lsr.w	r0, r3, r2
 80005e0:	bf18      	it	ne
 80005e2:	4240      	negne	r0, r0
 80005e4:	4770      	bx	lr
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	4770      	bx	lr
 80005ec:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005f0:	d101      	bne.n	80005f6 <__aeabi_f2iz+0x3a>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	d105      	bne.n	8000602 <__aeabi_f2iz+0x46>
 80005f6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80005fa:	bf08      	it	eq
 80005fc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb92 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f818 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8fc 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000618:	f000 f850 	bl	80006bc <MX_I2C1_Init>
  MX_I2C2_Init();
 800061c:	f000 f87c 	bl	8000718 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000620:	f000 f8a8 	bl	8000774 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(TMP100_CheckStatus(&hi2c1) == TMP_READY){ //check if the TMP100 is ready or not
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <main+0x34>)
 8000626:	f002 ffed 	bl	8003604 <TMP100_CheckStatus>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d103      	bne.n	8000638 <main+0x30>
	  HAL_TIM_Base_Start_IT(&htim2);  // start timer with interrupt
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <main+0x38>)
 8000632:	f002 fc45 	bl	8002ec0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <main+0x30>
 800063c:	20000084 	.word	0x20000084
 8000640:	2000012c 	.word	0x2000012c

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b090      	sub	sp, #64	@ 0x40
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2228      	movs	r2, #40	@ 0x28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fa78 	bl	8003b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	4618      	mov	r0, r3
 800067c:	f001 ffd4 	bl	8002628 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000686:	f000 f933 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fa42 	bl	8002b2c <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ae:	f000 f91f 	bl	80008f0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3740      	adds	r7, #64	@ 0x40
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f000 fe33 	bl	8001364 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f8f4 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000084 	.word	0x20000084
 8000710:	40005400 	.word	0x40005400
 8000714:	00061a80 	.word	0x00061a80

08000718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2C2_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_I2C2_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_I2C2_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_I2C2_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000756:	f000 fe05 	bl	8001364 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f8c6 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000d8 	.word	0x200000d8
 800076c:	40005800 	.word	0x40005800
 8000770:	00061a80 	.word	0x00061a80

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <MX_TIM2_Init+0x98>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_TIM2_Init+0x98>)
 800079a:	f240 321f 	movw	r2, #799	@ 0x31f
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_TIM2_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_TIM2_Init+0x98>)
 80007a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_TIM2_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_TIM2_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ba:	4814      	ldr	r0, [pc, #80]	@ (800080c <MX_TIM2_Init+0x98>)
 80007bc:	f002 fb30 	bl	8002e20 <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007c6:	f000 f893 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_TIM2_Init+0x98>)
 80007d8:	f002 fcb4 	bl	8003144 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007e2:	f000 f885 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_TIM2_Init+0x98>)
 80007f4:	f002 fe96 	bl	8003524 <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007fe:	f000 f877 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000012c 	.word	0x2000012c

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_GPIO_Init+0x28>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <MX_GPIO_Init+0x28>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <MX_GPIO_Init+0x28>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800084c:	d13f      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x92>
  {
    second_counter++;
 800084e:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000858:	801a      	strh	r2, [r3, #0]

    if (second_counter >= 600)  // 10 minutes
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000862:	d334      	bcc.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x92>
    {
      second_counter = 0;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]

      float temp = 0.0;
 800086a:	f04f 0300 	mov.w	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
      if(TMP100_ReadTemperature(&hi2c1, &temp) == HAL_OK)
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	4819      	ldr	r0, [pc, #100]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000878:	f002 feec 	bl	8003654 <TMP100_ReadTemperature>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d122      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x8c>
      {

    	  int16_t temp_fixed = (int16_t)(temp * 100);
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4916      	ldr	r1, [pc, #88]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fc60 	bl	800014c <__aeabi_fmul>
 800088c:	4603      	mov	r3, r0
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe94 	bl	80005bc <__aeabi_f2iz>
 8000894:	4603      	mov	r3, r0
 8000896:	82fb      	strh	r3, [r7, #22]
    	  uint8_t data[2] = {
    			  (uint8_t)(temp_fixed >> 8),
 8000898:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800089c:	121b      	asrs	r3, r3, #8
 800089e:	b21b      	sxth	r3, r3
 80008a0:	b2db      	uxtb	r3, r3
    	  uint8_t data[2] = {
 80008a2:	733b      	strb	r3, [r7, #12]
				  (uint8_t)(temp_fixed & 0xFF)
 80008a4:	8afb      	ldrh	r3, [r7, #22]
 80008a6:	b2db      	uxtb	r3, r3
    	  uint8_t data[2] = {
 80008a8:	737b      	strb	r3, [r7, #13]
    	  	  	  };
    	  EEPROM_WriteBytes(&hi2c2, log_address, data, 2);
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008ac:	8819      	ldrh	r1, [r3, #0]
 80008ae:	f107 020c 	add.w	r2, r7, #12
 80008b2:	2302      	movs	r3, #2
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008b6:	f000 f9e4 	bl	8000c82 <EEPROM_WriteBytes>
    	  log_address += 2;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	3302      	adds	r3, #2
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008c4:	801a      	strh	r2, [r3, #0]
      else{
    	  printf("TMP100 I2C Read Failed!\r\n");
      }
    }
  }
}
 80008c6:	e002      	b.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x92>
    	  printf("TMP100 I2C Read Failed!\r\n");
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008ca:	f003 f85d 	bl	8003988 <puts>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000174 	.word	0x20000174
 80008dc:	20000084 	.word	0x20000084
 80008e0:	42c80000 	.word	0x42c80000
 80008e4:	20000176 	.word	0x20000176
 80008e8:	200000d8 	.word	0x200000d8
 80008ec:	080040d8 	.word	0x080040d8

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_MspInit+0x5c>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <HAL_MspInit+0x5c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_MspInit+0x5c>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_MspInit+0x5c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_MspInit+0x60>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4a04      	ldr	r2, [pc, #16]	@ (800095c <HAL_MspInit+0x60>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	40010000 	.word	0x40010000

08000960 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a28 <HAL_I2C_MspInit+0xc8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d124      	bne.n	80009ca <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a29      	ldr	r2, [pc, #164]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000998:	23c0      	movs	r3, #192	@ 0xc0
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4821      	ldr	r0, [pc, #132]	@ (8000a30 <HAL_I2C_MspInit+0xd0>)
 80009ac:	f000 fb56 	bl	800105c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ba:	61d3      	str	r3, [r2, #28]
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009c8:	e029      	b.n	8000a1e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a19      	ldr	r2, [pc, #100]	@ (8000a34 <HAL_I2C_MspInit+0xd4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d124      	bne.n	8000a1e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <HAL_I2C_MspInit+0xd0>)
 8000a02:	f000 fb2b 	bl	800105c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 8000a0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_I2C_MspInit+0xcc>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40005800 	.word	0x40005800

08000a38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a48:	d113      	bne.n	8000a72 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <HAL_TIM_Base_MspInit+0x44>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	201c      	movs	r0, #28
 8000a68:	f000 fac1 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a6c:	201c      	movs	r0, #28
 8000a6e:	f000 fada 	bl	8001026 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <NMI_Handler+0x4>

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <MemManage_Handler+0x4>

08000a98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f000 f976 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <TIM2_IRQHandler+0x10>)
 8000ade:	f002 fa41 	bl	8002f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000012c 	.word	0x2000012c

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e009      	b.n	8000b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf1      	blt.n	8000b38 <_write+0x12>
  }
  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_close>:

int _close(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b84:	605a      	str	r2, [r3, #4]
  return 0;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f002 fff8 	bl	8003be4 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20005000 	.word	0x20005000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	20000178 	.word	0x20000178
 8000c28:	200002d0 	.word	0x200002d0

08000c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c38:	f7ff fff8 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c3e:	490c      	ldr	r1, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c40:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a09      	ldr	r2, [pc, #36]	@ (8000c78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c54:	4c09      	ldr	r4, [pc, #36]	@ (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f002 ffc5 	bl	8003bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c66:	f7ff fccf 	bl	8000608 <main>
  bx lr
 8000c6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c74:	08004128 	.word	0x08004128
  ldr r2, =_sbss
 8000c78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c7c:	200002cc 	.word	0x200002cc

08000c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_2_IRQHandler>

08000c82 <EEPROM_WriteBytes>:
#include "string.h"

#define EEPROM_ADDR (0x50 << 1)

void EEPROM_WriteBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddr, uint8_t *data, uint16_t size)
{
 8000c82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	460b      	mov	r3, r1
 8000c92:	817b      	strh	r3, [r7, #10]
 8000c94:	4613      	mov	r3, r2
 8000c96:	813b      	strh	r3, [r7, #8]
 8000c98:	466b      	mov	r3, sp
 8000c9a:	461e      	mov	r6, r3
    uint8_t buffer[size + 2];
 8000c9c:	893b      	ldrh	r3, [r7, #8]
 8000c9e:	1c99      	adds	r1, r3, #2
 8000ca0:	1e4b      	subs	r3, r1, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	4690      	mov	r8, r2
 8000caa:	4699      	mov	r9, r3
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	4614      	mov	r4, r2
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	00eb      	lsls	r3, r5, #3
 8000cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cd6:	00e2      	lsls	r2, r4, #3
 8000cd8:	460b      	mov	r3, r1
 8000cda:	3307      	adds	r3, #7
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ce4:	ab02      	add	r3, sp, #8
 8000ce6:	3300      	adds	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
    buffer[0] = (uint8_t)(memAddr >> 8);
 8000cea:	897b      	ldrh	r3, [r7, #10]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	701a      	strb	r2, [r3, #0]
    buffer[1] = (uint8_t)(memAddr & 0xFF);
 8000cf6:	897b      	ldrh	r3, [r7, #10]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	705a      	strb	r2, [r3, #1]
    memcpy(&buffer[2], data, size);
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	3302      	adds	r3, #2
 8000d02:	893a      	ldrh	r2, [r7, #8]
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 ff99 	bl	8003c3e <memcpy>

    HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDR, buffer, size + 2, HAL_MAX_DELAY);
 8000d0c:	893b      	ldrh	r3, [r7, #8]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	f04f 32ff 	mov.w	r2, #4294967295
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	21a0      	movs	r1, #160	@ 0xa0
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 fc65 	bl	80015ec <HAL_I2C_Master_Transmit>
    HAL_Delay(5);  // 5ms write time
 8000d22:	2005      	movs	r0, #5
 8000d24:	f000 f868 	bl	8000df8 <HAL_Delay>
 8000d28:	46b5      	mov	sp, r6
}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_Init+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_Init+0x28>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f947 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fdd4 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f95f 	bl	8001042 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f927 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a03      	ldr	r2, [pc, #12]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	2000017c 	.word	0x2000017c

08000de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	@ (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	2000017c 	.word	0x2000017c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff fff0 	bl	8000de4 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffe0 	bl	8000de4 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4906      	ldr	r1, [pc, #24]	@ (8000ed8 <__NVIC_EnableIRQ+0x34>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	@ (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff90 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff2d 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff42 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff90 	bl	8000f30 <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5f 	bl	8000edc <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff35 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b08b      	sub	sp, #44	@ 0x2c
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106e:	e169      	b.n	8001344 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001070:	2201      	movs	r2, #1
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8158 	bne.w	800133e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a9a      	ldr	r2, [pc, #616]	@ (80012fc <HAL_GPIO_Init+0x2a0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d05e      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 8001098:	4a98      	ldr	r2, [pc, #608]	@ (80012fc <HAL_GPIO_Init+0x2a0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d875      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 800109e:	4a98      	ldr	r2, [pc, #608]	@ (8001300 <HAL_GPIO_Init+0x2a4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d058      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010a4:	4a96      	ldr	r2, [pc, #600]	@ (8001300 <HAL_GPIO_Init+0x2a4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d86f      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010aa:	4a96      	ldr	r2, [pc, #600]	@ (8001304 <HAL_GPIO_Init+0x2a8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d052      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010b0:	4a94      	ldr	r2, [pc, #592]	@ (8001304 <HAL_GPIO_Init+0x2a8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d869      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010b6:	4a94      	ldr	r2, [pc, #592]	@ (8001308 <HAL_GPIO_Init+0x2ac>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d04c      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010bc:	4a92      	ldr	r2, [pc, #584]	@ (8001308 <HAL_GPIO_Init+0x2ac>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d863      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010c2:	4a92      	ldr	r2, [pc, #584]	@ (800130c <HAL_GPIO_Init+0x2b0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d046      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
 80010c8:	4a90      	ldr	r2, [pc, #576]	@ (800130c <HAL_GPIO_Init+0x2b0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d85d      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d82a      	bhi.n	8001128 <HAL_GPIO_Init+0xcc>
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d859      	bhi.n	800118a <HAL_GPIO_Init+0x12e>
 80010d6:	a201      	add	r2, pc, #4	@ (adr r2, 80010dc <HAL_GPIO_Init+0x80>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	08001157 	.word	0x08001157
 80010e0:	08001131 	.word	0x08001131
 80010e4:	08001143 	.word	0x08001143
 80010e8:	08001185 	.word	0x08001185
 80010ec:	0800118b 	.word	0x0800118b
 80010f0:	0800118b 	.word	0x0800118b
 80010f4:	0800118b 	.word	0x0800118b
 80010f8:	0800118b 	.word	0x0800118b
 80010fc:	0800118b 	.word	0x0800118b
 8001100:	0800118b 	.word	0x0800118b
 8001104:	0800118b 	.word	0x0800118b
 8001108:	0800118b 	.word	0x0800118b
 800110c:	0800118b 	.word	0x0800118b
 8001110:	0800118b 	.word	0x0800118b
 8001114:	0800118b 	.word	0x0800118b
 8001118:	0800118b 	.word	0x0800118b
 800111c:	0800118b 	.word	0x0800118b
 8001120:	08001139 	.word	0x08001139
 8001124:	0800114d 	.word	0x0800114d
 8001128:	4a79      	ldr	r2, [pc, #484]	@ (8001310 <HAL_GPIO_Init+0x2b4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800112e:	e02c      	b.n	800118a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e029      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	3304      	adds	r3, #4
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e024      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	3308      	adds	r3, #8
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e01f      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	330c      	adds	r3, #12
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e01a      	b.n	800118c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800115e:	2304      	movs	r3, #4
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e013      	b.n	800118c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800116c:	2308      	movs	r3, #8
 800116e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	611a      	str	r2, [r3, #16]
          break;
 8001176:	e009      	b.n	800118c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	615a      	str	r2, [r3, #20]
          break;
 8001182:	e003      	b.n	800118c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x130>
          break;
 800118a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2bff      	cmp	r3, #255	@ 0xff
 8001190:	d801      	bhi.n	8001196 <HAL_GPIO_Init+0x13a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	e001      	b.n	800119a <HAL_GPIO_Init+0x13e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3304      	adds	r3, #4
 800119a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2bff      	cmp	r3, #255	@ 0xff
 80011a0:	d802      	bhi.n	80011a8 <HAL_GPIO_Init+0x14c>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x152>
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	3b08      	subs	r3, #8
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	210f      	movs	r1, #15
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	6a39      	ldr	r1, [r7, #32]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80b1 	beq.w	800133e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001314 <HAL_GPIO_Init+0x2b8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001314 <HAL_GPIO_Init+0x2b8>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <HAL_GPIO_Init+0x2b8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011f4:	4a48      	ldr	r2, [pc, #288]	@ (8001318 <HAL_GPIO_Init+0x2bc>)
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a40      	ldr	r2, [pc, #256]	@ (800131c <HAL_GPIO_Init+0x2c0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d013      	beq.n	8001248 <HAL_GPIO_Init+0x1ec>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3f      	ldr	r2, [pc, #252]	@ (8001320 <HAL_GPIO_Init+0x2c4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d00d      	beq.n	8001244 <HAL_GPIO_Init+0x1e8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a3e      	ldr	r2, [pc, #248]	@ (8001324 <HAL_GPIO_Init+0x2c8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d007      	beq.n	8001240 <HAL_GPIO_Init+0x1e4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3d      	ldr	r2, [pc, #244]	@ (8001328 <HAL_GPIO_Init+0x2cc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d101      	bne.n	800123c <HAL_GPIO_Init+0x1e0>
 8001238:	2303      	movs	r3, #3
 800123a:	e006      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 800123c:	2304      	movs	r3, #4
 800123e:	e004      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001240:	2302      	movs	r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_GPIO_Init+0x1ee>
 8001248:	2300      	movs	r3, #0
 800124a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800125a:	492f      	ldr	r1, [pc, #188]	@ (8001318 <HAL_GPIO_Init+0x2bc>)
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001274:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	492c      	ldr	r1, [pc, #176]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001282:	4b2a      	ldr	r3, [pc, #168]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4928      	ldr	r1, [pc, #160]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800129c:	4b23      	ldr	r3, [pc, #140]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4922      	ldr	r1, [pc, #136]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	491e      	ldr	r1, [pc, #120]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4918      	ldr	r1, [pc, #96]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4914      	ldr	r1, [pc, #80]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d021      	beq.n	8001330 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	490e      	ldr	r1, [pc, #56]	@ (800132c <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e021      	b.n	800133e <HAL_GPIO_Init+0x2e2>
 80012fa:	bf00      	nop
 80012fc:	10320000 	.word	0x10320000
 8001300:	10310000 	.word	0x10310000
 8001304:	10220000 	.word	0x10220000
 8001308:	10210000 	.word	0x10210000
 800130c:	10120000 	.word	0x10120000
 8001310:	10110000 	.word	0x10110000
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40011000 	.word	0x40011000
 8001328:	40011400 	.word	0x40011400
 800132c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_GPIO_Init+0x304>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	43db      	mvns	r3, r3
 8001338:	4909      	ldr	r1, [pc, #36]	@ (8001360 <HAL_GPIO_Init+0x304>)
 800133a:	4013      	ands	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	3301      	adds	r3, #1
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	f47f ae8e 	bne.w	8001070 <HAL_GPIO_Init+0x14>
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	372c      	adds	r7, #44	@ 0x2c
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e12b      	b.n	80015ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fae8 	bl	8000960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2224      	movs	r2, #36	@ 0x24
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013c8:	f001 fcf8 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a81      	ldr	r2, [pc, #516]	@ (80015d8 <HAL_I2C_Init+0x274>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d807      	bhi.n	80013e8 <HAL_I2C_Init+0x84>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4a80      	ldr	r2, [pc, #512]	@ (80015dc <HAL_I2C_Init+0x278>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	bf94      	ite	ls
 80013e0:	2301      	movls	r3, #1
 80013e2:	2300      	movhi	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e006      	b.n	80013f6 <HAL_I2C_Init+0x92>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a7d      	ldr	r2, [pc, #500]	@ (80015e0 <HAL_I2C_Init+0x27c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bf94      	ite	ls
 80013f0:	2301      	movls	r3, #1
 80013f2:	2300      	movhi	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0e7      	b.n	80015ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4a78      	ldr	r2, [pc, #480]	@ (80015e4 <HAL_I2C_Init+0x280>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9b      	lsrs	r3, r3, #18
 8001408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a6a      	ldr	r2, [pc, #424]	@ (80015d8 <HAL_I2C_Init+0x274>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d802      	bhi.n	8001438 <HAL_I2C_Init+0xd4>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	e009      	b.n	800144c <HAL_I2C_Init+0xe8>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	4a69      	ldr	r2, [pc, #420]	@ (80015e8 <HAL_I2C_Init+0x284>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	099b      	lsrs	r3, r3, #6
 800144a:	3301      	adds	r3, #1
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	430b      	orrs	r3, r1
 8001452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800145e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	495c      	ldr	r1, [pc, #368]	@ (80015d8 <HAL_I2C_Init+0x274>)
 8001468:	428b      	cmp	r3, r1
 800146a:	d819      	bhi.n	80014a0 <HAL_I2C_Init+0x13c>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e59      	subs	r1, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fbb1 f3f3 	udiv	r3, r1, r3
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001480:	400b      	ands	r3, r1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00a      	beq.n	800149c <HAL_I2C_Init+0x138>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e59      	subs	r1, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fbb1 f3f3 	udiv	r3, r1, r3
 8001494:	3301      	adds	r3, #1
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	e051      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 800149c:	2304      	movs	r3, #4
 800149e:	e04f      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <HAL_I2C_Init+0x168>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e012      	b.n	80014f2 <HAL_I2C_Init+0x18e>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e58      	subs	r0, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	0099      	lsls	r1, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Init+0x196>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e022      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10e      	bne.n	8001520 <HAL_I2C_Init+0x1bc>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e58      	subs	r0, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	440b      	add	r3, r1
 8001510:	fbb0 f3f3 	udiv	r3, r0, r3
 8001514:	3301      	adds	r3, #1
 8001516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151e:	e00f      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e58      	subs	r0, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	0099      	lsls	r1, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	fbb0 f3f3 	udiv	r3, r0, r3
 8001536:	3301      	adds	r3, #1
 8001538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	6809      	ldr	r1, [r1, #0]
 8001544:	4313      	orrs	r3, r2
 8001546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800156e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6911      	ldr	r1, [r2, #16]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68d2      	ldr	r2, [r2, #12]
 800157a:	4311      	orrs	r1, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	430b      	orrs	r3, r1
 8001582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2220      	movs	r2, #32
 80015ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	000186a0 	.word	0x000186a0
 80015dc:	001e847f 	.word	0x001e847f
 80015e0:	003d08ff 	.word	0x003d08ff
 80015e4:	431bde83 	.word	0x431bde83
 80015e8:	10624dd3 	.word	0x10624dd3

080015ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	461a      	mov	r2, r3
 80015f8:	460b      	mov	r3, r1
 80015fa:	817b      	strh	r3, [r7, #10]
 80015fc:	4613      	mov	r3, r2
 80015fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff fbf0 	bl	8000de4 <HAL_GetTick>
 8001604:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b20      	cmp	r3, #32
 8001610:	f040 80e0 	bne.w	80017d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2319      	movs	r3, #25
 800161a:	2201      	movs	r2, #1
 800161c:	4970      	ldr	r1, [pc, #448]	@ (80017e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 fdcc 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800162a:	2302      	movs	r3, #2
 800162c:	e0d3      	b.n	80017d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_I2C_Master_Transmit+0x50>
 8001638:	2302      	movs	r3, #2
 800163a:	e0cc      	b.n	80017d6 <HAL_I2C_Master_Transmit+0x1ea>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b01      	cmp	r3, #1
 8001650:	d007      	beq.n	8001662 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2221      	movs	r2, #33	@ 0x21
 8001676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2210      	movs	r2, #16
 800167e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	893a      	ldrh	r2, [r7, #8]
 8001692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4a50      	ldr	r2, [pc, #320]	@ (80017e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016a4:	8979      	ldrh	r1, [r7, #10]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	6a3a      	ldr	r2, [r7, #32]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fc36 	bl	8001f1c <I2C_MasterRequestWrite>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e08d      	b.n	80017d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016d0:	e066      	b.n	80017a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	6a39      	ldr	r1, [r7, #32]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fe8a 	bl	80023f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00d      	beq.n	80016fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d107      	bne.n	80016fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06b      	b.n	80017d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001718:	b29b      	uxth	r3, r3
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b04      	cmp	r3, #4
 800173a:	d11b      	bne.n	8001774 <HAL_I2C_Master_Transmit+0x188>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	d017      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	6a39      	ldr	r1, [r7, #32]
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 fe81 	bl	8002480 <I2C_WaitOnBTFFlagUntilTimeout>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00d      	beq.n	80017a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	2b04      	cmp	r3, #4
 800178a:	d107      	bne.n	800179c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e01a      	b.n	80017d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d194      	bne.n	80016d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017d4:	2302      	movs	r3, #2
  }
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	00100002 	.word	0x00100002
 80017e4:	ffff0000 	.word	0xffff0000

080017e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	@ 0x30
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
 80017f8:	4613      	mov	r3, r2
 80017fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff faf0 	bl	8000de4 <HAL_GetTick>
 8001804:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	f040 824b 	bne.w	8001caa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2319      	movs	r3, #25
 800181a:	2201      	movs	r2, #1
 800181c:	497f      	ldr	r1, [pc, #508]	@ (8001a1c <HAL_I2C_Master_Receive+0x234>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fccc 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	e23e      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_I2C_Master_Receive+0x54>
 8001838:	2302      	movs	r3, #2
 800183a:	e237      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d007      	beq.n	8001862 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2222      	movs	r2, #34	@ 0x22
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2210      	movs	r2, #16
 800187e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	893a      	ldrh	r2, [r7, #8]
 8001892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a5f      	ldr	r2, [pc, #380]	@ (8001a20 <HAL_I2C_Master_Receive+0x238>)
 80018a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fbb8 	bl	8002020 <I2C_MasterRequestRead>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1f8      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d113      	bne.n	80018ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e1cc      	b.n	8001c84 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d11e      	bne.n	8001930 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001900:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001902:	b672      	cpsid	i
}
 8001904:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800192c:	b662      	cpsie	i
}
 800192e:	e035      	b.n	800199c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001934:	2b02      	cmp	r3, #2
 8001936:	d11e      	bne.n	8001976 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001946:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001970:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001972:	b662      	cpsie	i
}
 8001974:	e012      	b.n	800199c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800199c:	e172      	b.n	8001c84 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	f200 811f 	bhi.w	8001be6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d123      	bne.n	80019f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fdab 	bl	8002510 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e173      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019f6:	e145      	b.n	8001c84 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d152      	bne.n	8001aa6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a06:	2200      	movs	r2, #0
 8001a08:	4906      	ldr	r1, [pc, #24]	@ (8001a24 <HAL_I2C_Master_Receive+0x23c>)
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fbd6 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e148      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
 8001a1a:	bf00      	nop
 8001a1c:	00100002 	.word	0x00100002
 8001a20:	ffff0000 	.word	0xffff0000
 8001a24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a6e:	b662      	cpsie	i
}
 8001a70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001aa4:	e0ee      	b.n	8001c84 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aac:	2200      	movs	r2, #0
 8001aae:	4981      	ldr	r1, [pc, #516]	@ (8001cb4 <HAL_I2C_Master_Receive+0x4cc>)
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fb83 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0f5      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ace:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b06:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb8 <HAL_I2C_Master_Receive+0x4d0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	4a6b      	ldr	r2, [pc, #428]	@ (8001cbc <HAL_I2C_Master_Receive+0x4d4>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0a1a      	lsrs	r2, r3, #8
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00da      	lsls	r2, r3, #3
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d118      	bne.n	8001b5e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f043 0220 	orr.w	r2, r3, #32
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4e:	b662      	cpsie	i
}
 8001b50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0a6      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d1d9      	bne.n	8001b20 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bae:	b662      	cpsie	i
}
 8001bb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001be4:	e04e      	b.n	8001c84 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fc90 	bl	8002510 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e058      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d124      	bne.n	8001c84 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c50:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f47f ae88 	bne.w	800199e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3728      	adds	r7, #40	@ 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	00010004 	.word	0x00010004
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	14f8b589 	.word	0x14f8b589

08001cc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	@ 0x28
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff f888 	bl	8000de4 <HAL_GetTick>
 8001cd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	f040 8111 	bne.w	8001f0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2319      	movs	r3, #25
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4988      	ldr	r1, [pc, #544]	@ (8001f14 <HAL_I2C_IsDeviceReady+0x254>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fa62 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e104      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_I2C_IsDeviceReady+0x50>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e0fd      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d007      	beq.n	8001d36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2224      	movs	r2, #36	@ 0x24
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a70      	ldr	r2, [pc, #448]	@ (8001f18 <HAL_I2C_IsDeviceReady+0x258>)
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fa20 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d90:	d103      	bne.n	8001d9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0b6      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d9e:	897b      	ldrh	r3, [r7, #10]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001dac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f819 	bl	8000de4 <HAL_GetTick>
 8001db2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001de2:	e025      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7fe fffe 	bl	8000de4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <HAL_I2C_IsDeviceReady+0x13a>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	22a0      	movs	r2, #160	@ 0xa0
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e3a:	d005      	beq.n	8001e48 <HAL_I2C_IsDeviceReady+0x188>
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_I2C_IsDeviceReady+0x188>
 8001e42:	7dbb      	ldrb	r3, [r7, #22]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0cd      	beq.n	8001de4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d129      	bne.n	8001eb2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2319      	movs	r3, #25
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4921      	ldr	r1, [pc, #132]	@ (8001f14 <HAL_I2C_IsDeviceReady+0x254>)
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f994 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e036      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e02c      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001eca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2319      	movs	r3, #25
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	490f      	ldr	r1, [pc, #60]	@ (8001f14 <HAL_I2C_IsDeviceReady+0x254>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f970 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e012      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f4ff af32 	bcc.w	8001d5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
  }
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	00100002 	.word	0x00100002
 8001f18:	ffff0000 	.word	0xffff0000

08001f1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d006      	beq.n	8001f46 <I2C_MasterRequestWrite+0x2a>
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d003      	beq.n	8001f46 <I2C_MasterRequestWrite+0x2a>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f44:	d108      	bne.n	8001f58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00b      	b.n	8001f70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	2b12      	cmp	r3, #18
 8001f5e:	d107      	bne.n	8001f70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f91d 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f96:	d103      	bne.n	8001fa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e035      	b.n	8002010 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fac:	d108      	bne.n	8001fc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fae:	897b      	ldrh	r3, [r7, #10]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	e01b      	b.n	8001ff8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fc0:	897b      	ldrh	r3, [r7, #10]
 8001fc2:	11db      	asrs	r3, r3, #7
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f003 0306 	and.w	r3, r3, #6
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f063 030f 	orn	r3, r3, #15
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	490e      	ldr	r1, [pc, #56]	@ (8002018 <I2C_MasterRequestWrite+0xfc>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f966 	bl	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e010      	b.n	8002010 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4907      	ldr	r1, [pc, #28]	@ (800201c <I2C_MasterRequestWrite+0x100>)
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f956 	bl	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	00010008 	.word	0x00010008
 800201c:	00010002 	.word	0x00010002

08002020 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	460b      	mov	r3, r1
 800202e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002044:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d006      	beq.n	800205a <I2C_MasterRequestRead+0x3a>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d003      	beq.n	800205a <I2C_MasterRequestRead+0x3a>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002058:	d108      	bne.n	800206c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e00b      	b.n	8002084 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	2b11      	cmp	r3, #17
 8002072:	d107      	bne.n	8002084 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002082:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f893 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020aa:	d103      	bne.n	80020b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e079      	b.n	80021ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020c0:	d108      	bne.n	80020d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020c2:	897b      	ldrh	r3, [r7, #10]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	e05f      	b.n	8002194 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020d4:	897b      	ldrh	r3, [r7, #10]
 80020d6:	11db      	asrs	r3, r3, #7
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f003 0306 	and.w	r3, r3, #6
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f063 030f 	orn	r3, r3, #15
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4930      	ldr	r1, [pc, #192]	@ (80021b4 <I2C_MasterRequestRead+0x194>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f8dc 	bl	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e054      	b.n	80021ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4929      	ldr	r1, [pc, #164]	@ (80021b8 <I2C_MasterRequestRead+0x198>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f8cc 	bl	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e044      	b.n	80021ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002146:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f831 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800216e:	d103      	bne.n	8002178 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e017      	b.n	80021ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800217c:	897b      	ldrh	r3, [r7, #10]
 800217e:	11db      	asrs	r3, r3, #7
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f003 0306 	and.w	r3, r3, #6
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f063 030e 	orn	r3, r3, #14
 800218c:	b2da      	uxtb	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4907      	ldr	r1, [pc, #28]	@ (80021b8 <I2C_MasterRequestRead+0x198>)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f888 	bl	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	00010008 	.word	0x00010008
 80021b8:	00010002 	.word	0x00010002

080021bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021cc:	e048      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d044      	beq.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7fe fe05 	bl	8000de4 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d139      	bne.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0c1b      	lsrs	r3, r3, #16
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10d      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	43da      	mvns	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4013      	ands	r3, r2
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	e00c      	b.n	800222c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	43da      	mvns	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4013      	ands	r3, r2
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	429a      	cmp	r2, r3
 8002230:	d116      	bne.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e023      	b.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10d      	bne.n	8002286 <I2C_WaitOnFlagUntilTimeout+0xca>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	43da      	mvns	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	e00c      	b.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	43da      	mvns	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4013      	ands	r3, r2
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d093      	beq.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022be:	e071      	b.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ce:	d123      	bne.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0204 	orr.w	r2, r3, #4
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e067      	b.n	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231e:	d041      	beq.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002320:	f7fe fd60 	bl	8000de4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d302      	bcc.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d136      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10c      	bne.n	800235a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e00b      	b.n	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	43da      	mvns	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e021      	b.n	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10c      	bne.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e00b      	b.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4013      	ands	r3, r2
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf14      	ite	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	2300      	moveq	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f af6d 	bne.w	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023fc:	e034      	b.n	8002468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f8e3 	bl	80025ca <I2C_IsAcknowledgeFailed>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e034      	b.n	8002478 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d028      	beq.n	8002468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7fe fce5 	bl	8000de4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d11d      	bne.n	8002468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002436:	2b80      	cmp	r3, #128	@ 0x80
 8002438:	d016      	beq.n	8002468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	f043 0220 	orr.w	r2, r3, #32
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002472:	2b80      	cmp	r3, #128	@ 0x80
 8002474:	d1c3      	bne.n	80023fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800248c:	e034      	b.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f89b 	bl	80025ca <I2C_IsAcknowledgeFailed>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e034      	b.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d028      	beq.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a6:	f7fe fc9d 	bl	8000de4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d302      	bcc.n	80024bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11d      	bne.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d016      	beq.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d1c3      	bne.n	800248e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800251c:	e049      	b.n	80025b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b10      	cmp	r3, #16
 800252a:	d119      	bne.n	8002560 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0210 	mvn.w	r2, #16
 8002534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e030      	b.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002560:	f7fe fc40 	bl	8000de4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d302      	bcc.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11d      	bne.n	80025b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002580:	2b40      	cmp	r3, #64	@ 0x40
 8002582:	d016      	beq.n	80025b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e007      	b.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d1ae      	bne.n	800251e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e0:	d11b      	bne.n	800261a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	f043 0204 	orr.w	r2, r3, #4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e272      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8087 	beq.w	8002756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002648:	4b92      	ldr	r3, [pc, #584]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b04      	cmp	r3, #4
 8002652:	d00c      	beq.n	800266e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002654:	4b8f      	ldr	r3, [pc, #572]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d112      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
 8002660:	4b8c      	ldr	r3, [pc, #560]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266c:	d10b      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	4b89      	ldr	r3, [pc, #548]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d06c      	beq.n	8002754 <HAL_RCC_OscConfig+0x12c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d168      	bne.n	8002754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e24c      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x76>
 8002690:	4b80      	ldr	r3, [pc, #512]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a7f      	ldr	r2, [pc, #508]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e02e      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7a      	ldr	r2, [pc, #488]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b78      	ldr	r3, [pc, #480]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a77      	ldr	r2, [pc, #476]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xbc>
 80026ca:	4b72      	ldr	r3, [pc, #456]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a71      	ldr	r2, [pc, #452]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6e      	ldr	r2, [pc, #440]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b68      	ldr	r3, [pc, #416]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a67      	ldr	r2, [pc, #412]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fb6e 	bl	8000de4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fb6a 	bl	8000de4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e200      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b5d      	ldr	r3, [pc, #372]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xe4>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fb5a 	bl	8000de4 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fb56 	bl	8000de4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1ec      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	4b53      	ldr	r3, [pc, #332]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x10c>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d11c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x18c>
 800277a:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	4b43      	ldr	r3, [pc, #268]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x176>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e1c0      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b3d      	ldr	r3, [pc, #244]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4939      	ldr	r1, [pc, #228]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	e03a      	b.n	800282a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027bc:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <HAL_RCC_OscConfig+0x270>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe fb0f 	bl	8000de4 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fb0b 	bl	8000de4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e1a1      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4927      	ldr	r1, [pc, #156]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <HAL_RCC_OscConfig+0x270>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe faee 	bl	8000de4 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7fe faea 	bl	8000de4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e180      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03a      	beq.n	80028ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <HAL_RCC_OscConfig+0x274>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe face 	bl	8000de4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe faca 	bl	8000de4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e160      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f000 faba 	bl	8002de4 <RCC_Delay>
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_RCC_OscConfig+0x274>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7fe fab4 	bl	8000de4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287e:	e00f      	b.n	80028a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7fe fab0 	bl	8000de4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d908      	bls.n	80028a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e146      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	42420000 	.word	0x42420000
 800289c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	4b92      	ldr	r3, [pc, #584]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e9      	bne.n	8002880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a6 	beq.w	8002a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b8b      	ldr	r3, [pc, #556]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b88      	ldr	r3, [pc, #544]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a87      	ldr	r2, [pc, #540]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]
 80028d6:	4b85      	ldr	r3, [pc, #532]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b82      	ldr	r3, [pc, #520]	@ (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b7f      	ldr	r3, [pc, #508]	@ (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7e      	ldr	r2, [pc, #504]	@ (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe fa71 	bl	8000de4 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe fa6d 	bl	8000de4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	@ 0x64
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e103      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b75      	ldr	r3, [pc, #468]	@ (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x312>
 800292c:	4b6f      	ldr	r3, [pc, #444]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a6e      	ldr	r2, [pc, #440]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	e02d      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x334>
 8002942:	4b6a      	ldr	r3, [pc, #424]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a69      	ldr	r2, [pc, #420]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	4b67      	ldr	r3, [pc, #412]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a66      	ldr	r2, [pc, #408]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	e01c      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x356>
 8002964:	4b61      	ldr	r3, [pc, #388]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a60      	ldr	r2, [pc, #384]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	4b5e      	ldr	r3, [pc, #376]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a5d      	ldr	r2, [pc, #372]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	e00b      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800297e:	4b5b      	ldr	r3, [pc, #364]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a5a      	ldr	r2, [pc, #360]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	4b58      	ldr	r3, [pc, #352]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a57      	ldr	r2, [pc, #348]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d015      	beq.n	80029ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7fe fa21 	bl	8000de4 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fa1d 	bl	8000de4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0b1      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4b4b      	ldr	r3, [pc, #300]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ee      	beq.n	80029a6 <HAL_RCC_OscConfig+0x37e>
 80029c8:	e014      	b.n	80029f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fa0b 	bl	8000de4 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fa07 	bl	8000de4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e09b      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	4b40      	ldr	r3, [pc, #256]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b3c      	ldr	r3, [pc, #240]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a3b      	ldr	r2, [pc, #236]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8087 	beq.w	8002b1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a10:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d061      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d146      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b33      	ldr	r3, [pc, #204]	@ (8002af4 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe f9db 	bl	8000de4 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe f9d7 	bl	8000de4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e06d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a44:	4b29      	ldr	r3, [pc, #164]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a5a:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4921      	ldr	r1, [pc, #132]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a19      	ldr	r1, [r3, #32]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	491b      	ldr	r1, [pc, #108]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f9ab 	bl	8000de4 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe f9a7 	bl	8000de4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e03d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x46a>
 8002ab0:	e035      	b.n	8002b1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f994 	bl	8000de4 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f990 	bl	8000de4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e026      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x498>
 8002ade:	e01e      	b.n	8002b1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e019      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
 8002af4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0d0      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d910      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b67      	ldr	r3, [pc, #412]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0207 	bic.w	r2, r3, #7
 8002b56:	4965      	ldr	r1, [pc, #404]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b63      	ldr	r3, [pc, #396]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0b8      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b88:	4b59      	ldr	r3, [pc, #356]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a58      	ldr	r2, [pc, #352]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba0:	4b53      	ldr	r3, [pc, #332]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a52      	ldr	r2, [pc, #328]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002baa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bac:	4b50      	ldr	r3, [pc, #320]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	494d      	ldr	r1, [pc, #308]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d040      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b47      	ldr	r3, [pc, #284]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d115      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e073      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06b      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b39      	ldr	r3, [pc, #228]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4936      	ldr	r1, [pc, #216]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe f8e2 	bl	8000de4 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7fe f8de 	bl	8000de4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e053      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d210      	bcs.n	8002c7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b24      	ldr	r3, [pc, #144]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0207 	bic.w	r2, r3, #7
 8002c62:	4922      	ldr	r1, [pc, #136]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e032      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c88:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4916      	ldr	r1, [pc, #88]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ca6:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	490e      	ldr	r1, [pc, #56]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cba:	f000 f821 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	490a      	ldr	r1, [pc, #40]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ccc:	5ccb      	ldrb	r3, [r1, r3]
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	4a09      	ldr	r2, [pc, #36]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cd6:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_RCC_ClockConfig+0x1d0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe f840 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40022000 	.word	0x40022000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	080040f4 	.word	0x080040f4
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	20000004 	.word	0x20000004

08002d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x30>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x36>
 8002d2e:	e027      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d32:	613b      	str	r3, [r7, #16]
      break;
 8002d34:	e027      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	4a17      	ldr	r2, [pc, #92]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d4e:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0c5b      	lsrs	r3, r3, #17
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d62:	fb03 f202 	mul.w	r2, r3, r2
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e004      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0c      	ldr	r2, [pc, #48]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d82:	613b      	str	r3, [r7, #16]
      break;
 8002d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d86:	693b      	ldr	r3, [r7, #16]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	007a1200 	.word	0x007a1200
 8002d9c:	0800410c 	.word	0x0800410c
 8002da0:	0800411c 	.word	0x0800411c
 8002da4:	003d0900 	.word	0x003d0900

08002da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b02      	ldr	r3, [pc, #8]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000000 	.word	0x20000000

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc0:	f7ff fff2 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4903      	ldr	r1, [pc, #12]	@ (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	08004104 	.word	0x08004104

08002de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <RCC_Delay+0x34>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <RCC_Delay+0x38>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0a5b      	lsrs	r3, r3, #9
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e00:	bf00      	nop
  }
  while (Delay --);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	60fa      	str	r2, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f9      	bne.n	8002e00 <RCC_Delay+0x1c>
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	10624dd3 	.word	0x10624dd3

08002e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e041      	b.n	8002eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fdf6 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f000 fa5c 	bl	800331c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d001      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e03a      	b.n	8002f4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	@ (8002f58 <HAL_TIM_Base_Start_IT+0x98>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x58>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f02:	d009      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x58>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a14      	ldr	r2, [pc, #80]	@ (8002f5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x58>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d111      	bne.n	8002f3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d010      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3a:	e007      	b.n	8002f4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800

08002f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d020      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0202 	mvn.w	r2, #2
 8002f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f998 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f98b 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f99a 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d020      	beq.n	8003014 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0204 	mvn.w	r2, #4
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f972 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f965 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f974 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d020      	beq.n	8003060 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01b      	beq.n	8003060 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0208 	mvn.w	r2, #8
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2204      	movs	r2, #4
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f94c 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f93f 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f94e 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d020      	beq.n	80030ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01b      	beq.n	80030ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0210 	mvn.w	r2, #16
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2208      	movs	r2, #8
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f926 	bl	80032e4 <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f919 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f928 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0201 	mvn.w	r2, #1
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fbb6 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa7f 	bl	80035f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8f8 	bl	8003308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00c      	beq.n	800313c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0220 	mvn.w	r2, #32
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa52 	bl	80035e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIM_ConfigClockSource+0x1c>
 800315c:	2302      	movs	r3, #2
 800315e:	e0b4      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x186>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800317e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003198:	d03e      	beq.n	8003218 <HAL_TIM_ConfigClockSource+0xd4>
 800319a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319e:	f200 8087 	bhi.w	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a6:	f000 8086 	beq.w	80032b6 <HAL_TIM_ConfigClockSource+0x172>
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ae:	d87f      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b70      	cmp	r3, #112	@ 0x70
 80031b2:	d01a      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0xa6>
 80031b4:	2b70      	cmp	r3, #112	@ 0x70
 80031b6:	d87b      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b60      	cmp	r3, #96	@ 0x60
 80031ba:	d050      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x11a>
 80031bc:	2b60      	cmp	r3, #96	@ 0x60
 80031be:	d877      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b50      	cmp	r3, #80	@ 0x50
 80031c2:	d03c      	beq.n	800323e <HAL_TIM_ConfigClockSource+0xfa>
 80031c4:	2b50      	cmp	r3, #80	@ 0x50
 80031c6:	d873      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b40      	cmp	r3, #64	@ 0x40
 80031ca:	d058      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x13a>
 80031cc:	2b40      	cmp	r3, #64	@ 0x40
 80031ce:	d86f      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d0:	2b30      	cmp	r3, #48	@ 0x30
 80031d2:	d064      	beq.n	800329e <HAL_TIM_ConfigClockSource+0x15a>
 80031d4:	2b30      	cmp	r3, #48	@ 0x30
 80031d6:	d86b      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d060      	beq.n	800329e <HAL_TIM_ConfigClockSource+0x15a>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d867      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d05c      	beq.n	800329e <HAL_TIM_ConfigClockSource+0x15a>
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d05a      	beq.n	800329e <HAL_TIM_ConfigClockSource+0x15a>
 80031e8:	e062      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031fa:	f000 f974 	bl	80034e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800320c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	609a      	str	r2, [r3, #8]
      break;
 8003216:	e04f      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	f000 f95d 	bl	80034e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800323a:	609a      	str	r2, [r3, #8]
      break;
 800323c:	e03c      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324a:	461a      	mov	r2, r3
 800324c:	f000 f8d4 	bl	80033f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2150      	movs	r1, #80	@ 0x50
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f92b 	bl	80034b2 <TIM_ITRx_SetConfig>
      break;
 800325c:	e02c      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800326a:	461a      	mov	r2, r3
 800326c:	f000 f8f2 	bl	8003454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2160      	movs	r1, #96	@ 0x60
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f91b 	bl	80034b2 <TIM_ITRx_SetConfig>
      break;
 800327c:	e01c      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	461a      	mov	r2, r3
 800328c:	f000 f8b4 	bl	80033f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2140      	movs	r1, #64	@ 0x40
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f90b 	bl	80034b2 <TIM_ITRx_SetConfig>
      break;
 800329c:	e00c      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f000 f902 	bl	80034b2 <TIM_ITRx_SetConfig>
      break;
 80032ae:	e003      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	e000      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
	...

0800331c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a2f      	ldr	r2, [pc, #188]	@ (80033ec <TIM_Base_SetConfig+0xd0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00b      	beq.n	800334c <TIM_Base_SetConfig+0x30>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333a:	d007      	beq.n	800334c <TIM_Base_SetConfig+0x30>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a2c      	ldr	r2, [pc, #176]	@ (80033f0 <TIM_Base_SetConfig+0xd4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d003      	beq.n	800334c <TIM_Base_SetConfig+0x30>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a2b      	ldr	r2, [pc, #172]	@ (80033f4 <TIM_Base_SetConfig+0xd8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d108      	bne.n	800335e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a22      	ldr	r2, [pc, #136]	@ (80033ec <TIM_Base_SetConfig+0xd0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00b      	beq.n	800337e <TIM_Base_SetConfig+0x62>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336c:	d007      	beq.n	800337e <TIM_Base_SetConfig+0x62>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1f      	ldr	r2, [pc, #124]	@ (80033f0 <TIM_Base_SetConfig+0xd4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <TIM_Base_SetConfig+0x62>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1e      	ldr	r2, [pc, #120]	@ (80033f4 <TIM_Base_SetConfig+0xd8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	@ (80033ec <TIM_Base_SetConfig+0xd0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d103      	bne.n	80033c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
  }
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800

080033f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 030a 	bic.w	r3, r3, #10
 8003434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0210 	bic.w	r2, r3, #16
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800347e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	031b      	lsls	r3, r3, #12
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003490:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	621a      	str	r2, [r3, #32]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f043 0307 	orr.w	r3, r3, #7
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b087      	sub	sp, #28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	431a      	orrs	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4313      	orrs	r3, r2
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	609a      	str	r2, [r3, #8]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003538:	2302      	movs	r3, #2
 800353a:	e046      	b.n	80035ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a16      	ldr	r2, [pc, #88]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003588:	d009      	beq.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a10      	ldr	r2, [pc, #64]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10c      	bne.n	80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800

080035e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <TMP100_CheckStatus>:
#define TMP100_I2C_ADDR  (0x48 << 1)
/*
 * check if the device is present or not on the i2c bus
 * */
TMP100_STATUS TMP100_CheckStatus(I2C_HandleTypeDef *hi2c)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    const uint8_t max_retries = 5;
 800360c:	2305      	movs	r3, #5
 800360e:	737b      	strb	r3, [r7, #13]
    TMP100_STATUS retStatus = TMP_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]

    for (uint8_t attempt = 0; attempt < max_retries; attempt++) {
 8003614:	2300      	movs	r3, #0
 8003616:	73bb      	strb	r3, [r7, #14]
 8003618:	e012      	b.n	8003640 <TMP100_CheckStatus+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, TMP100_I2C_ADDR, 3, HAL_MAX_DELAY) == HAL_OK) {
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	2203      	movs	r2, #3
 8003620:	2190      	movs	r1, #144	@ 0x90
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fe fb4c 	bl	8001cc0 <HAL_I2C_IsDeviceReady>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <TMP100_CheckStatus+0x30>
            retStatus = TMP_READY;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
            break;
 8003632:	e009      	b.n	8003648 <TMP100_CheckStatus+0x44>
        }
        HAL_Delay(10);  // delay between retries
 8003634:	200a      	movs	r0, #10
 8003636:	f7fd fbdf 	bl	8000df8 <HAL_Delay>
    for (uint8_t attempt = 0; attempt < max_retries; attempt++) {
 800363a:	7bbb      	ldrb	r3, [r7, #14]
 800363c:	3301      	adds	r3, #1
 800363e:	73bb      	strb	r3, [r7, #14]
 8003640:	7bba      	ldrb	r2, [r7, #14]
 8003642:	7b7b      	ldrb	r3, [r7, #13]
 8003644:	429a      	cmp	r2, r3
 8003646:	d3e8      	bcc.n	800361a <TMP100_CheckStatus+0x16>
    }

    return retStatus;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <TMP100_ReadTemperature>:

/*
 * By default we are using the continues conversion mode and 12 bit resolution which is okay for the 10 min logging
 * */
TMP100_STATUS TMP100_ReadTemperature(I2C_HandleTypeDef *hi2c, float *readVal)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
    uint8_t reg = 0x00;
 800365e:	2300      	movs	r3, #0
 8003660:	737b      	strb	r3, [r7, #13]
    uint8_t data[2];

    if(HAL_I2C_Master_Transmit(hi2c, TMP100_I2C_ADDR, &reg, 1, HAL_MAX_DELAY) != HAL_OK){
 8003662:	f107 020d 	add.w	r2, r7, #13
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2301      	movs	r3, #1
 800366e:	2190      	movs	r1, #144	@ 0x90
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fd ffbb 	bl	80015ec <HAL_I2C_Master_Transmit>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <TMP100_ReadTemperature+0x2c>
    	return TMP_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e02c      	b.n	80036da <TMP100_ReadTemperature+0x86>
    }
    if(HAL_I2C_Master_Receive(hi2c, TMP100_I2C_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK){
 8003680:	f107 0208 	add.w	r2, r7, #8
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2302      	movs	r3, #2
 800368c:	2190      	movs	r1, #144	@ 0x90
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fe f8aa 	bl	80017e8 <HAL_I2C_Master_Receive>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <TMP100_ReadTemperature+0x4a>
		return TMP_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e01d      	b.n	80036da <TMP100_ReadTemperature+0x86>
    }
    //HAL_I2C_Mem_Read(hi2c, TMP100_I2C_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
    int16_t raw = (data[0] << 4) | (data[1] >> 4);
 800369e:	7a3b      	ldrb	r3, [r7, #8]
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	7a7b      	ldrb	r3, [r7, #9]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	b21b      	sxth	r3, r3
 80036ae:	4313      	orrs	r3, r2
 80036b0:	81fb      	strh	r3, [r7, #14]

    *readVal = TMP100_ConvertRawTemp(raw);
 80036b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f816 	bl	80036e8 <TMP100_ConvertRawTemp>
 80036bc:	4602      	mov	r2, r0
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
	if(*readVal == TMP100_INVALID_TEMP){
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4907      	ldr	r1, [pc, #28]	@ (80036e4 <TMP100_ReadTemperature+0x90>)
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fc ff45 	bl	8000558 <__aeabi_fcmpeq>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <TMP100_ReadTemperature+0x84>
		return TMP_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <TMP100_ReadTemperature+0x86>
	}
	return TMP_READY;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	c47a0000 	.word	0xc47a0000

080036e8 <TMP100_ConvertRawTemp>:
    return TMP_READY;
}
/*
 * Static function to calculate the temp value from raw values
 * */
static float TMP100_ConvertRawTemp(int16_t raw){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]

	//checking for the signed bit before copying the 12bit number to 16bit
    if (raw & 0x800) raw |= 0xF000;
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <TMP100_ConvertRawTemp+0x20>
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003702:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003706:	80fb      	strh	r3, [r7, #6]

    float temp = raw * 0.0625f;
 8003708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fc fe8b 	bl	8000428 <__aeabi_i2f>
 8003712:	4603      	mov	r3, r0
 8003714:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc fd17 	bl	800014c <__aeabi_fmul>
 800371e:	4603      	mov	r3, r0
 8003720:	60fb      	str	r3, [r7, #12]
    if (temp < -55.0f || temp > 125.0f){
 8003722:	490a      	ldr	r1, [pc, #40]	@ (800374c <TMP100_ConvertRawTemp+0x64>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7fc ff21 	bl	800056c <__aeabi_fcmplt>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <TMP100_ConvertRawTemp+0x56>
 8003730:	4907      	ldr	r1, [pc, #28]	@ (8003750 <TMP100_ConvertRawTemp+0x68>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7fc ff38 	bl	80005a8 <__aeabi_fcmpgt>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <TMP100_ConvertRawTemp+0x5a>
		return TMP100_INVALID_TEMP;
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <TMP100_ConvertRawTemp+0x6c>)
 8003740:	e000      	b.n	8003744 <TMP100_ConvertRawTemp+0x5c>
    }
	return temp;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	c25c0000 	.word	0xc25c0000
 8003750:	42fa0000 	.word	0x42fa0000
 8003754:	c47a0000 	.word	0xc47a0000

08003758 <std>:
 8003758:	2300      	movs	r3, #0
 800375a:	b510      	push	{r4, lr}
 800375c:	4604      	mov	r4, r0
 800375e:	e9c0 3300 	strd	r3, r3, [r0]
 8003762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003766:	6083      	str	r3, [r0, #8]
 8003768:	8181      	strh	r1, [r0, #12]
 800376a:	6643      	str	r3, [r0, #100]	@ 0x64
 800376c:	81c2      	strh	r2, [r0, #14]
 800376e:	6183      	str	r3, [r0, #24]
 8003770:	4619      	mov	r1, r3
 8003772:	2208      	movs	r2, #8
 8003774:	305c      	adds	r0, #92	@ 0x5c
 8003776:	f000 f9e7 	bl	8003b48 <memset>
 800377a:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <std+0x58>)
 800377c:	6224      	str	r4, [r4, #32]
 800377e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <std+0x5c>)
 8003782:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003784:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <std+0x60>)
 8003786:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <std+0x64>)
 800378a:	6323      	str	r3, [r4, #48]	@ 0x30
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <std+0x68>)
 800378e:	429c      	cmp	r4, r3
 8003790:	d006      	beq.n	80037a0 <std+0x48>
 8003792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003796:	4294      	cmp	r4, r2
 8003798:	d002      	beq.n	80037a0 <std+0x48>
 800379a:	33d0      	adds	r3, #208	@ 0xd0
 800379c:	429c      	cmp	r4, r3
 800379e:	d105      	bne.n	80037ac <std+0x54>
 80037a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a8:	f000 ba46 	b.w	8003c38 <__retarget_lock_init_recursive>
 80037ac:	bd10      	pop	{r4, pc}
 80037ae:	bf00      	nop
 80037b0:	08003999 	.word	0x08003999
 80037b4:	080039bb 	.word	0x080039bb
 80037b8:	080039f3 	.word	0x080039f3
 80037bc:	08003a17 	.word	0x08003a17
 80037c0:	20000180 	.word	0x20000180

080037c4 <stdio_exit_handler>:
 80037c4:	4a02      	ldr	r2, [pc, #8]	@ (80037d0 <stdio_exit_handler+0xc>)
 80037c6:	4903      	ldr	r1, [pc, #12]	@ (80037d4 <stdio_exit_handler+0x10>)
 80037c8:	4803      	ldr	r0, [pc, #12]	@ (80037d8 <stdio_exit_handler+0x14>)
 80037ca:	f000 b869 	b.w	80038a0 <_fwalk_sglue>
 80037ce:	bf00      	nop
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	08003f49 	.word	0x08003f49
 80037d8:	2000001c 	.word	0x2000001c

080037dc <cleanup_stdio>:
 80037dc:	6841      	ldr	r1, [r0, #4]
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <cleanup_stdio+0x34>)
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4299      	cmp	r1, r3
 80037e4:	4604      	mov	r4, r0
 80037e6:	d001      	beq.n	80037ec <cleanup_stdio+0x10>
 80037e8:	f000 fbae 	bl	8003f48 <_fflush_r>
 80037ec:	68a1      	ldr	r1, [r4, #8]
 80037ee:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <cleanup_stdio+0x38>)
 80037f0:	4299      	cmp	r1, r3
 80037f2:	d002      	beq.n	80037fa <cleanup_stdio+0x1e>
 80037f4:	4620      	mov	r0, r4
 80037f6:	f000 fba7 	bl	8003f48 <_fflush_r>
 80037fa:	68e1      	ldr	r1, [r4, #12]
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <cleanup_stdio+0x3c>)
 80037fe:	4299      	cmp	r1, r3
 8003800:	d004      	beq.n	800380c <cleanup_stdio+0x30>
 8003802:	4620      	mov	r0, r4
 8003804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003808:	f000 bb9e 	b.w	8003f48 <_fflush_r>
 800380c:	bd10      	pop	{r4, pc}
 800380e:	bf00      	nop
 8003810:	20000180 	.word	0x20000180
 8003814:	200001e8 	.word	0x200001e8
 8003818:	20000250 	.word	0x20000250

0800381c <global_stdio_init.part.0>:
 800381c:	b510      	push	{r4, lr}
 800381e:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <global_stdio_init.part.0+0x30>)
 8003820:	4c0b      	ldr	r4, [pc, #44]	@ (8003850 <global_stdio_init.part.0+0x34>)
 8003822:	4a0c      	ldr	r2, [pc, #48]	@ (8003854 <global_stdio_init.part.0+0x38>)
 8003824:	4620      	mov	r0, r4
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	2104      	movs	r1, #4
 800382a:	2200      	movs	r2, #0
 800382c:	f7ff ff94 	bl	8003758 <std>
 8003830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003834:	2201      	movs	r2, #1
 8003836:	2109      	movs	r1, #9
 8003838:	f7ff ff8e 	bl	8003758 <std>
 800383c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003840:	2202      	movs	r2, #2
 8003842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003846:	2112      	movs	r1, #18
 8003848:	f7ff bf86 	b.w	8003758 <std>
 800384c:	200002b8 	.word	0x200002b8
 8003850:	20000180 	.word	0x20000180
 8003854:	080037c5 	.word	0x080037c5

08003858 <__sfp_lock_acquire>:
 8003858:	4801      	ldr	r0, [pc, #4]	@ (8003860 <__sfp_lock_acquire+0x8>)
 800385a:	f000 b9ee 	b.w	8003c3a <__retarget_lock_acquire_recursive>
 800385e:	bf00      	nop
 8003860:	200002c1 	.word	0x200002c1

08003864 <__sfp_lock_release>:
 8003864:	4801      	ldr	r0, [pc, #4]	@ (800386c <__sfp_lock_release+0x8>)
 8003866:	f000 b9e9 	b.w	8003c3c <__retarget_lock_release_recursive>
 800386a:	bf00      	nop
 800386c:	200002c1 	.word	0x200002c1

08003870 <__sinit>:
 8003870:	b510      	push	{r4, lr}
 8003872:	4604      	mov	r4, r0
 8003874:	f7ff fff0 	bl	8003858 <__sfp_lock_acquire>
 8003878:	6a23      	ldr	r3, [r4, #32]
 800387a:	b11b      	cbz	r3, 8003884 <__sinit+0x14>
 800387c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003880:	f7ff bff0 	b.w	8003864 <__sfp_lock_release>
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <__sinit+0x28>)
 8003886:	6223      	str	r3, [r4, #32]
 8003888:	4b04      	ldr	r3, [pc, #16]	@ (800389c <__sinit+0x2c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f5      	bne.n	800387c <__sinit+0xc>
 8003890:	f7ff ffc4 	bl	800381c <global_stdio_init.part.0>
 8003894:	e7f2      	b.n	800387c <__sinit+0xc>
 8003896:	bf00      	nop
 8003898:	080037dd 	.word	0x080037dd
 800389c:	200002b8 	.word	0x200002b8

080038a0 <_fwalk_sglue>:
 80038a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038a4:	4607      	mov	r7, r0
 80038a6:	4688      	mov	r8, r1
 80038a8:	4614      	mov	r4, r2
 80038aa:	2600      	movs	r6, #0
 80038ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038b0:	f1b9 0901 	subs.w	r9, r9, #1
 80038b4:	d505      	bpl.n	80038c2 <_fwalk_sglue+0x22>
 80038b6:	6824      	ldr	r4, [r4, #0]
 80038b8:	2c00      	cmp	r4, #0
 80038ba:	d1f7      	bne.n	80038ac <_fwalk_sglue+0xc>
 80038bc:	4630      	mov	r0, r6
 80038be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038c2:	89ab      	ldrh	r3, [r5, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d907      	bls.n	80038d8 <_fwalk_sglue+0x38>
 80038c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038cc:	3301      	adds	r3, #1
 80038ce:	d003      	beq.n	80038d8 <_fwalk_sglue+0x38>
 80038d0:	4629      	mov	r1, r5
 80038d2:	4638      	mov	r0, r7
 80038d4:	47c0      	blx	r8
 80038d6:	4306      	orrs	r6, r0
 80038d8:	3568      	adds	r5, #104	@ 0x68
 80038da:	e7e9      	b.n	80038b0 <_fwalk_sglue+0x10>

080038dc <_puts_r>:
 80038dc:	6a03      	ldr	r3, [r0, #32]
 80038de:	b570      	push	{r4, r5, r6, lr}
 80038e0:	4605      	mov	r5, r0
 80038e2:	460e      	mov	r6, r1
 80038e4:	6884      	ldr	r4, [r0, #8]
 80038e6:	b90b      	cbnz	r3, 80038ec <_puts_r+0x10>
 80038e8:	f7ff ffc2 	bl	8003870 <__sinit>
 80038ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038ee:	07db      	lsls	r3, r3, #31
 80038f0:	d405      	bmi.n	80038fe <_puts_r+0x22>
 80038f2:	89a3      	ldrh	r3, [r4, #12]
 80038f4:	0598      	lsls	r0, r3, #22
 80038f6:	d402      	bmi.n	80038fe <_puts_r+0x22>
 80038f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038fa:	f000 f99e 	bl	8003c3a <__retarget_lock_acquire_recursive>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	0719      	lsls	r1, r3, #28
 8003902:	d502      	bpl.n	800390a <_puts_r+0x2e>
 8003904:	6923      	ldr	r3, [r4, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d135      	bne.n	8003976 <_puts_r+0x9a>
 800390a:	4621      	mov	r1, r4
 800390c:	4628      	mov	r0, r5
 800390e:	f000 f8c5 	bl	8003a9c <__swsetup_r>
 8003912:	b380      	cbz	r0, 8003976 <_puts_r+0x9a>
 8003914:	f04f 35ff 	mov.w	r5, #4294967295
 8003918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800391a:	07da      	lsls	r2, r3, #31
 800391c:	d405      	bmi.n	800392a <_puts_r+0x4e>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	059b      	lsls	r3, r3, #22
 8003922:	d402      	bmi.n	800392a <_puts_r+0x4e>
 8003924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003926:	f000 f989 	bl	8003c3c <__retarget_lock_release_recursive>
 800392a:	4628      	mov	r0, r5
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	2b00      	cmp	r3, #0
 8003930:	da04      	bge.n	800393c <_puts_r+0x60>
 8003932:	69a2      	ldr	r2, [r4, #24]
 8003934:	429a      	cmp	r2, r3
 8003936:	dc17      	bgt.n	8003968 <_puts_r+0x8c>
 8003938:	290a      	cmp	r1, #10
 800393a:	d015      	beq.n	8003968 <_puts_r+0x8c>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	6022      	str	r2, [r4, #0]
 8003942:	7019      	strb	r1, [r3, #0]
 8003944:	68a3      	ldr	r3, [r4, #8]
 8003946:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800394a:	3b01      	subs	r3, #1
 800394c:	60a3      	str	r3, [r4, #8]
 800394e:	2900      	cmp	r1, #0
 8003950:	d1ed      	bne.n	800392e <_puts_r+0x52>
 8003952:	2b00      	cmp	r3, #0
 8003954:	da11      	bge.n	800397a <_puts_r+0x9e>
 8003956:	4622      	mov	r2, r4
 8003958:	210a      	movs	r1, #10
 800395a:	4628      	mov	r0, r5
 800395c:	f000 f85f 	bl	8003a1e <__swbuf_r>
 8003960:	3001      	adds	r0, #1
 8003962:	d0d7      	beq.n	8003914 <_puts_r+0x38>
 8003964:	250a      	movs	r5, #10
 8003966:	e7d7      	b.n	8003918 <_puts_r+0x3c>
 8003968:	4622      	mov	r2, r4
 800396a:	4628      	mov	r0, r5
 800396c:	f000 f857 	bl	8003a1e <__swbuf_r>
 8003970:	3001      	adds	r0, #1
 8003972:	d1e7      	bne.n	8003944 <_puts_r+0x68>
 8003974:	e7ce      	b.n	8003914 <_puts_r+0x38>
 8003976:	3e01      	subs	r6, #1
 8003978:	e7e4      	b.n	8003944 <_puts_r+0x68>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	6022      	str	r2, [r4, #0]
 8003980:	220a      	movs	r2, #10
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e7ee      	b.n	8003964 <_puts_r+0x88>
	...

08003988 <puts>:
 8003988:	4b02      	ldr	r3, [pc, #8]	@ (8003994 <puts+0xc>)
 800398a:	4601      	mov	r1, r0
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	f7ff bfa5 	b.w	80038dc <_puts_r>
 8003992:	bf00      	nop
 8003994:	20000018 	.word	0x20000018

08003998 <__sread>:
 8003998:	b510      	push	{r4, lr}
 800399a:	460c      	mov	r4, r1
 800399c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a0:	f000 f8fc 	bl	8003b9c <_read_r>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	bfab      	itete	ge
 80039a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039aa:	89a3      	ldrhlt	r3, [r4, #12]
 80039ac:	181b      	addge	r3, r3, r0
 80039ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039b2:	bfac      	ite	ge
 80039b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039b6:	81a3      	strhlt	r3, [r4, #12]
 80039b8:	bd10      	pop	{r4, pc}

080039ba <__swrite>:
 80039ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039be:	461f      	mov	r7, r3
 80039c0:	898b      	ldrh	r3, [r1, #12]
 80039c2:	4605      	mov	r5, r0
 80039c4:	05db      	lsls	r3, r3, #23
 80039c6:	460c      	mov	r4, r1
 80039c8:	4616      	mov	r6, r2
 80039ca:	d505      	bpl.n	80039d8 <__swrite+0x1e>
 80039cc:	2302      	movs	r3, #2
 80039ce:	2200      	movs	r2, #0
 80039d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d4:	f000 f8d0 	bl	8003b78 <_lseek_r>
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	4632      	mov	r2, r6
 80039dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039e0:	81a3      	strh	r3, [r4, #12]
 80039e2:	4628      	mov	r0, r5
 80039e4:	463b      	mov	r3, r7
 80039e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ee:	f000 b8e7 	b.w	8003bc0 <_write_r>

080039f2 <__sseek>:
 80039f2:	b510      	push	{r4, lr}
 80039f4:	460c      	mov	r4, r1
 80039f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039fa:	f000 f8bd 	bl	8003b78 <_lseek_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	bf15      	itete	ne
 8003a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a0e:	81a3      	strheq	r3, [r4, #12]
 8003a10:	bf18      	it	ne
 8003a12:	81a3      	strhne	r3, [r4, #12]
 8003a14:	bd10      	pop	{r4, pc}

08003a16 <__sclose>:
 8003a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1a:	f000 b89d 	b.w	8003b58 <_close_r>

08003a1e <__swbuf_r>:
 8003a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a20:	460e      	mov	r6, r1
 8003a22:	4614      	mov	r4, r2
 8003a24:	4605      	mov	r5, r0
 8003a26:	b118      	cbz	r0, 8003a30 <__swbuf_r+0x12>
 8003a28:	6a03      	ldr	r3, [r0, #32]
 8003a2a:	b90b      	cbnz	r3, 8003a30 <__swbuf_r+0x12>
 8003a2c:	f7ff ff20 	bl	8003870 <__sinit>
 8003a30:	69a3      	ldr	r3, [r4, #24]
 8003a32:	60a3      	str	r3, [r4, #8]
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	071a      	lsls	r2, r3, #28
 8003a38:	d501      	bpl.n	8003a3e <__swbuf_r+0x20>
 8003a3a:	6923      	ldr	r3, [r4, #16]
 8003a3c:	b943      	cbnz	r3, 8003a50 <__swbuf_r+0x32>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 f82b 	bl	8003a9c <__swsetup_r>
 8003a46:	b118      	cbz	r0, 8003a50 <__swbuf_r+0x32>
 8003a48:	f04f 37ff 	mov.w	r7, #4294967295
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	6922      	ldr	r2, [r4, #16]
 8003a54:	b2f6      	uxtb	r6, r6
 8003a56:	1a98      	subs	r0, r3, r2
 8003a58:	6963      	ldr	r3, [r4, #20]
 8003a5a:	4637      	mov	r7, r6
 8003a5c:	4283      	cmp	r3, r0
 8003a5e:	dc05      	bgt.n	8003a6c <__swbuf_r+0x4e>
 8003a60:	4621      	mov	r1, r4
 8003a62:	4628      	mov	r0, r5
 8003a64:	f000 fa70 	bl	8003f48 <_fflush_r>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d1ed      	bne.n	8003a48 <__swbuf_r+0x2a>
 8003a6c:	68a3      	ldr	r3, [r4, #8]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60a3      	str	r3, [r4, #8]
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	6022      	str	r2, [r4, #0]
 8003a78:	701e      	strb	r6, [r3, #0]
 8003a7a:	6962      	ldr	r2, [r4, #20]
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d004      	beq.n	8003a8c <__swbuf_r+0x6e>
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	07db      	lsls	r3, r3, #31
 8003a86:	d5e1      	bpl.n	8003a4c <__swbuf_r+0x2e>
 8003a88:	2e0a      	cmp	r6, #10
 8003a8a:	d1df      	bne.n	8003a4c <__swbuf_r+0x2e>
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f000 fa5a 	bl	8003f48 <_fflush_r>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d0d9      	beq.n	8003a4c <__swbuf_r+0x2e>
 8003a98:	e7d6      	b.n	8003a48 <__swbuf_r+0x2a>
	...

08003a9c <__swsetup_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4b29      	ldr	r3, [pc, #164]	@ (8003b44 <__swsetup_r+0xa8>)
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	b118      	cbz	r0, 8003ab0 <__swsetup_r+0x14>
 8003aa8:	6a03      	ldr	r3, [r0, #32]
 8003aaa:	b90b      	cbnz	r3, 8003ab0 <__swsetup_r+0x14>
 8003aac:	f7ff fee0 	bl	8003870 <__sinit>
 8003ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab4:	0719      	lsls	r1, r3, #28
 8003ab6:	d422      	bmi.n	8003afe <__swsetup_r+0x62>
 8003ab8:	06da      	lsls	r2, r3, #27
 8003aba:	d407      	bmi.n	8003acc <__swsetup_r+0x30>
 8003abc:	2209      	movs	r2, #9
 8003abe:	602a      	str	r2, [r5, #0]
 8003ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	e033      	b.n	8003b34 <__swsetup_r+0x98>
 8003acc:	0758      	lsls	r0, r3, #29
 8003ace:	d512      	bpl.n	8003af6 <__swsetup_r+0x5a>
 8003ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ad2:	b141      	cbz	r1, 8003ae6 <__swsetup_r+0x4a>
 8003ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ad8:	4299      	cmp	r1, r3
 8003ada:	d002      	beq.n	8003ae2 <__swsetup_r+0x46>
 8003adc:	4628      	mov	r0, r5
 8003ade:	f000 f8bd 	bl	8003c5c <_free_r>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ae6:	89a3      	ldrh	r3, [r4, #12]
 8003ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003aec:	81a3      	strh	r3, [r4, #12]
 8003aee:	2300      	movs	r3, #0
 8003af0:	6063      	str	r3, [r4, #4]
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	81a3      	strh	r3, [r4, #12]
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	b94b      	cbnz	r3, 8003b16 <__swsetup_r+0x7a>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b0c:	d003      	beq.n	8003b16 <__swsetup_r+0x7a>
 8003b0e:	4621      	mov	r1, r4
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 fa66 	bl	8003fe2 <__smakebuf_r>
 8003b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b1a:	f013 0201 	ands.w	r2, r3, #1
 8003b1e:	d00a      	beq.n	8003b36 <__swsetup_r+0x9a>
 8003b20:	2200      	movs	r2, #0
 8003b22:	60a2      	str	r2, [r4, #8]
 8003b24:	6962      	ldr	r2, [r4, #20]
 8003b26:	4252      	negs	r2, r2
 8003b28:	61a2      	str	r2, [r4, #24]
 8003b2a:	6922      	ldr	r2, [r4, #16]
 8003b2c:	b942      	cbnz	r2, 8003b40 <__swsetup_r+0xa4>
 8003b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b32:	d1c5      	bne.n	8003ac0 <__swsetup_r+0x24>
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
 8003b36:	0799      	lsls	r1, r3, #30
 8003b38:	bf58      	it	pl
 8003b3a:	6962      	ldrpl	r2, [r4, #20]
 8003b3c:	60a2      	str	r2, [r4, #8]
 8003b3e:	e7f4      	b.n	8003b2a <__swsetup_r+0x8e>
 8003b40:	2000      	movs	r0, #0
 8003b42:	e7f7      	b.n	8003b34 <__swsetup_r+0x98>
 8003b44:	20000018 	.word	0x20000018

08003b48 <memset>:
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4402      	add	r2, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	f803 1b01 	strb.w	r1, [r3], #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <_close_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4d05      	ldr	r5, [pc, #20]	@ (8003b74 <_close_r+0x1c>)
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4608      	mov	r0, r1
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	f7fc fffb 	bl	8000b5e <_close>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_close_r+0x1a>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_close_r+0x1a>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	200002bc 	.word	0x200002bc

08003b78 <_lseek_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	2200      	movs	r2, #0
 8003b82:	4d05      	ldr	r5, [pc, #20]	@ (8003b98 <_lseek_r+0x20>)
 8003b84:	602a      	str	r2, [r5, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7fd f80d 	bl	8000ba6 <_lseek>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_lseek_r+0x1e>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_lseek_r+0x1e>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	200002bc 	.word	0x200002bc

08003b9c <_read_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4d05      	ldr	r5, [pc, #20]	@ (8003bbc <_read_r+0x20>)
 8003ba8:	602a      	str	r2, [r5, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7fc ff9e 	bl	8000aec <_read>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_read_r+0x1e>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_read_r+0x1e>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	200002bc 	.word	0x200002bc

08003bc0 <_write_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4d05      	ldr	r5, [pc, #20]	@ (8003be0 <_write_r+0x20>)
 8003bcc:	602a      	str	r2, [r5, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f7fc ffa9 	bl	8000b26 <_write>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_write_r+0x1e>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_write_r+0x1e>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	200002bc 	.word	0x200002bc

08003be4 <__errno>:
 8003be4:	4b01      	ldr	r3, [pc, #4]	@ (8003bec <__errno+0x8>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000018 	.word	0x20000018

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	@ (8003c28 <__libc_init_array+0x38>)
 8003bf6:	4c0d      	ldr	r4, [pc, #52]	@ (8003c2c <__libc_init_array+0x3c>)
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	f000 fa5e 	bl	80040c0 <_init>
 8003c04:	2600      	movs	r6, #0
 8003c06:	4d0a      	ldr	r5, [pc, #40]	@ (8003c30 <__libc_init_array+0x40>)
 8003c08:	4c0a      	ldr	r4, [pc, #40]	@ (8003c34 <__libc_init_array+0x44>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08004120 	.word	0x08004120
 8003c2c:	08004120 	.word	0x08004120
 8003c30:	08004120 	.word	0x08004120
 8003c34:	08004124 	.word	0x08004124

08003c38 <__retarget_lock_init_recursive>:
 8003c38:	4770      	bx	lr

08003c3a <__retarget_lock_acquire_recursive>:
 8003c3a:	4770      	bx	lr

08003c3c <__retarget_lock_release_recursive>:
 8003c3c:	4770      	bx	lr

08003c3e <memcpy>:
 8003c3e:	440a      	add	r2, r1
 8003c40:	4291      	cmp	r1, r2
 8003c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c46:	d100      	bne.n	8003c4a <memcpy+0xc>
 8003c48:	4770      	bx	lr
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c50:	4291      	cmp	r1, r2
 8003c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c56:	d1f9      	bne.n	8003c4c <memcpy+0xe>
 8003c58:	bd10      	pop	{r4, pc}
	...

08003c5c <_free_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4605      	mov	r5, r0
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d040      	beq.n	8003ce6 <_free_r+0x8a>
 8003c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c68:	1f0c      	subs	r4, r1, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfb8      	it	lt
 8003c6e:	18e4      	addlt	r4, r4, r3
 8003c70:	f000 f8de 	bl	8003e30 <__malloc_lock>
 8003c74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <_free_r+0x8c>)
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	b933      	cbnz	r3, 8003c88 <_free_r+0x2c>
 8003c7a:	6063      	str	r3, [r4, #4]
 8003c7c:	6014      	str	r4, [r2, #0]
 8003c7e:	4628      	mov	r0, r5
 8003c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c84:	f000 b8da 	b.w	8003e3c <__malloc_unlock>
 8003c88:	42a3      	cmp	r3, r4
 8003c8a:	d908      	bls.n	8003c9e <_free_r+0x42>
 8003c8c:	6820      	ldr	r0, [r4, #0]
 8003c8e:	1821      	adds	r1, r4, r0
 8003c90:	428b      	cmp	r3, r1
 8003c92:	bf01      	itttt	eq
 8003c94:	6819      	ldreq	r1, [r3, #0]
 8003c96:	685b      	ldreq	r3, [r3, #4]
 8003c98:	1809      	addeq	r1, r1, r0
 8003c9a:	6021      	streq	r1, [r4, #0]
 8003c9c:	e7ed      	b.n	8003c7a <_free_r+0x1e>
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	b10b      	cbz	r3, 8003ca8 <_free_r+0x4c>
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d9fa      	bls.n	8003c9e <_free_r+0x42>
 8003ca8:	6811      	ldr	r1, [r2, #0]
 8003caa:	1850      	adds	r0, r2, r1
 8003cac:	42a0      	cmp	r0, r4
 8003cae:	d10b      	bne.n	8003cc8 <_free_r+0x6c>
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	4401      	add	r1, r0
 8003cb4:	1850      	adds	r0, r2, r1
 8003cb6:	4283      	cmp	r3, r0
 8003cb8:	6011      	str	r1, [r2, #0]
 8003cba:	d1e0      	bne.n	8003c7e <_free_r+0x22>
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4408      	add	r0, r1
 8003cc2:	6010      	str	r0, [r2, #0]
 8003cc4:	6053      	str	r3, [r2, #4]
 8003cc6:	e7da      	b.n	8003c7e <_free_r+0x22>
 8003cc8:	d902      	bls.n	8003cd0 <_free_r+0x74>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	602b      	str	r3, [r5, #0]
 8003cce:	e7d6      	b.n	8003c7e <_free_r+0x22>
 8003cd0:	6820      	ldr	r0, [r4, #0]
 8003cd2:	1821      	adds	r1, r4, r0
 8003cd4:	428b      	cmp	r3, r1
 8003cd6:	bf01      	itttt	eq
 8003cd8:	6819      	ldreq	r1, [r3, #0]
 8003cda:	685b      	ldreq	r3, [r3, #4]
 8003cdc:	1809      	addeq	r1, r1, r0
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	6063      	str	r3, [r4, #4]
 8003ce2:	6054      	str	r4, [r2, #4]
 8003ce4:	e7cb      	b.n	8003c7e <_free_r+0x22>
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	200002c8 	.word	0x200002c8

08003cec <sbrk_aligned>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4e0f      	ldr	r6, [pc, #60]	@ (8003d2c <sbrk_aligned+0x40>)
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	6831      	ldr	r1, [r6, #0]
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	b911      	cbnz	r1, 8003cfe <sbrk_aligned+0x12>
 8003cf8:	f000 f9d2 	bl	80040a0 <_sbrk_r>
 8003cfc:	6030      	str	r0, [r6, #0]
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 f9cd 	bl	80040a0 <_sbrk_r>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	d103      	bne.n	8003d12 <sbrk_aligned+0x26>
 8003d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d0e:	4620      	mov	r0, r4
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	1cc4      	adds	r4, r0, #3
 8003d14:	f024 0403 	bic.w	r4, r4, #3
 8003d18:	42a0      	cmp	r0, r4
 8003d1a:	d0f8      	beq.n	8003d0e <sbrk_aligned+0x22>
 8003d1c:	1a21      	subs	r1, r4, r0
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 f9be 	bl	80040a0 <_sbrk_r>
 8003d24:	3001      	adds	r0, #1
 8003d26:	d1f2      	bne.n	8003d0e <sbrk_aligned+0x22>
 8003d28:	e7ef      	b.n	8003d0a <sbrk_aligned+0x1e>
 8003d2a:	bf00      	nop
 8003d2c:	200002c4 	.word	0x200002c4

08003d30 <_malloc_r>:
 8003d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d34:	1ccd      	adds	r5, r1, #3
 8003d36:	f025 0503 	bic.w	r5, r5, #3
 8003d3a:	3508      	adds	r5, #8
 8003d3c:	2d0c      	cmp	r5, #12
 8003d3e:	bf38      	it	cc
 8003d40:	250c      	movcc	r5, #12
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	4606      	mov	r6, r0
 8003d46:	db01      	blt.n	8003d4c <_malloc_r+0x1c>
 8003d48:	42a9      	cmp	r1, r5
 8003d4a:	d904      	bls.n	8003d56 <_malloc_r+0x26>
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	6033      	str	r3, [r6, #0]
 8003d50:	2000      	movs	r0, #0
 8003d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e2c <_malloc_r+0xfc>
 8003d5a:	f000 f869 	bl	8003e30 <__malloc_lock>
 8003d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d62:	461c      	mov	r4, r3
 8003d64:	bb44      	cbnz	r4, 8003db8 <_malloc_r+0x88>
 8003d66:	4629      	mov	r1, r5
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f7ff ffbf 	bl	8003cec <sbrk_aligned>
 8003d6e:	1c43      	adds	r3, r0, #1
 8003d70:	4604      	mov	r4, r0
 8003d72:	d158      	bne.n	8003e26 <_malloc_r+0xf6>
 8003d74:	f8d8 4000 	ldr.w	r4, [r8]
 8003d78:	4627      	mov	r7, r4
 8003d7a:	2f00      	cmp	r7, #0
 8003d7c:	d143      	bne.n	8003e06 <_malloc_r+0xd6>
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	d04b      	beq.n	8003e1a <_malloc_r+0xea>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	4639      	mov	r1, r7
 8003d86:	4630      	mov	r0, r6
 8003d88:	eb04 0903 	add.w	r9, r4, r3
 8003d8c:	f000 f988 	bl	80040a0 <_sbrk_r>
 8003d90:	4581      	cmp	r9, r0
 8003d92:	d142      	bne.n	8003e1a <_malloc_r+0xea>
 8003d94:	6821      	ldr	r1, [r4, #0]
 8003d96:	4630      	mov	r0, r6
 8003d98:	1a6d      	subs	r5, r5, r1
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f7ff ffa6 	bl	8003cec <sbrk_aligned>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d03a      	beq.n	8003e1a <_malloc_r+0xea>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	442b      	add	r3, r5
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	f8d8 3000 	ldr.w	r3, [r8]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	bb62      	cbnz	r2, 8003e0c <_malloc_r+0xdc>
 8003db2:	f8c8 7000 	str.w	r7, [r8]
 8003db6:	e00f      	b.n	8003dd8 <_malloc_r+0xa8>
 8003db8:	6822      	ldr	r2, [r4, #0]
 8003dba:	1b52      	subs	r2, r2, r5
 8003dbc:	d420      	bmi.n	8003e00 <_malloc_r+0xd0>
 8003dbe:	2a0b      	cmp	r2, #11
 8003dc0:	d917      	bls.n	8003df2 <_malloc_r+0xc2>
 8003dc2:	1961      	adds	r1, r4, r5
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	6025      	str	r5, [r4, #0]
 8003dc8:	bf18      	it	ne
 8003dca:	6059      	strne	r1, [r3, #4]
 8003dcc:	6863      	ldr	r3, [r4, #4]
 8003dce:	bf08      	it	eq
 8003dd0:	f8c8 1000 	streq.w	r1, [r8]
 8003dd4:	5162      	str	r2, [r4, r5]
 8003dd6:	604b      	str	r3, [r1, #4]
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f000 f82f 	bl	8003e3c <__malloc_unlock>
 8003dde:	f104 000b 	add.w	r0, r4, #11
 8003de2:	1d23      	adds	r3, r4, #4
 8003de4:	f020 0007 	bic.w	r0, r0, #7
 8003de8:	1ac2      	subs	r2, r0, r3
 8003dea:	bf1c      	itt	ne
 8003dec:	1a1b      	subne	r3, r3, r0
 8003dee:	50a3      	strne	r3, [r4, r2]
 8003df0:	e7af      	b.n	8003d52 <_malloc_r+0x22>
 8003df2:	6862      	ldr	r2, [r4, #4]
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	bf0c      	ite	eq
 8003df8:	f8c8 2000 	streq.w	r2, [r8]
 8003dfc:	605a      	strne	r2, [r3, #4]
 8003dfe:	e7eb      	b.n	8003dd8 <_malloc_r+0xa8>
 8003e00:	4623      	mov	r3, r4
 8003e02:	6864      	ldr	r4, [r4, #4]
 8003e04:	e7ae      	b.n	8003d64 <_malloc_r+0x34>
 8003e06:	463c      	mov	r4, r7
 8003e08:	687f      	ldr	r7, [r7, #4]
 8003e0a:	e7b6      	b.n	8003d7a <_malloc_r+0x4a>
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	d1fb      	bne.n	8003e0c <_malloc_r+0xdc>
 8003e14:	2300      	movs	r3, #0
 8003e16:	6053      	str	r3, [r2, #4]
 8003e18:	e7de      	b.n	8003dd8 <_malloc_r+0xa8>
 8003e1a:	230c      	movs	r3, #12
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	f000 f80c 	bl	8003e3c <__malloc_unlock>
 8003e24:	e794      	b.n	8003d50 <_malloc_r+0x20>
 8003e26:	6005      	str	r5, [r0, #0]
 8003e28:	e7d6      	b.n	8003dd8 <_malloc_r+0xa8>
 8003e2a:	bf00      	nop
 8003e2c:	200002c8 	.word	0x200002c8

08003e30 <__malloc_lock>:
 8003e30:	4801      	ldr	r0, [pc, #4]	@ (8003e38 <__malloc_lock+0x8>)
 8003e32:	f7ff bf02 	b.w	8003c3a <__retarget_lock_acquire_recursive>
 8003e36:	bf00      	nop
 8003e38:	200002c0 	.word	0x200002c0

08003e3c <__malloc_unlock>:
 8003e3c:	4801      	ldr	r0, [pc, #4]	@ (8003e44 <__malloc_unlock+0x8>)
 8003e3e:	f7ff befd 	b.w	8003c3c <__retarget_lock_release_recursive>
 8003e42:	bf00      	nop
 8003e44:	200002c0 	.word	0x200002c0

08003e48 <__sflush_r>:
 8003e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	0716      	lsls	r6, r2, #28
 8003e50:	4605      	mov	r5, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	d454      	bmi.n	8003f00 <__sflush_r+0xb8>
 8003e56:	684b      	ldr	r3, [r1, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	dc02      	bgt.n	8003e62 <__sflush_r+0x1a>
 8003e5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	dd48      	ble.n	8003ef4 <__sflush_r+0xac>
 8003e62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e64:	2e00      	cmp	r6, #0
 8003e66:	d045      	beq.n	8003ef4 <__sflush_r+0xac>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e6e:	682f      	ldr	r7, [r5, #0]
 8003e70:	6a21      	ldr	r1, [r4, #32]
 8003e72:	602b      	str	r3, [r5, #0]
 8003e74:	d030      	beq.n	8003ed8 <__sflush_r+0x90>
 8003e76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	0759      	lsls	r1, r3, #29
 8003e7c:	d505      	bpl.n	8003e8a <__sflush_r+0x42>
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	1ad2      	subs	r2, r2, r3
 8003e82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e84:	b10b      	cbz	r3, 8003e8a <__sflush_r+0x42>
 8003e86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e88:	1ad2      	subs	r2, r2, r3
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e90:	6a21      	ldr	r1, [r4, #32]
 8003e92:	47b0      	blx	r6
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	89a3      	ldrh	r3, [r4, #12]
 8003e98:	d106      	bne.n	8003ea8 <__sflush_r+0x60>
 8003e9a:	6829      	ldr	r1, [r5, #0]
 8003e9c:	291d      	cmp	r1, #29
 8003e9e:	d82b      	bhi.n	8003ef8 <__sflush_r+0xb0>
 8003ea0:	4a28      	ldr	r2, [pc, #160]	@ (8003f44 <__sflush_r+0xfc>)
 8003ea2:	40ca      	lsrs	r2, r1
 8003ea4:	07d6      	lsls	r6, r2, #31
 8003ea6:	d527      	bpl.n	8003ef8 <__sflush_r+0xb0>
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	6062      	str	r2, [r4, #4]
 8003eac:	6922      	ldr	r2, [r4, #16]
 8003eae:	04d9      	lsls	r1, r3, #19
 8003eb0:	6022      	str	r2, [r4, #0]
 8003eb2:	d504      	bpl.n	8003ebe <__sflush_r+0x76>
 8003eb4:	1c42      	adds	r2, r0, #1
 8003eb6:	d101      	bne.n	8003ebc <__sflush_r+0x74>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b903      	cbnz	r3, 8003ebe <__sflush_r+0x76>
 8003ebc:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ebe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ec0:	602f      	str	r7, [r5, #0]
 8003ec2:	b1b9      	cbz	r1, 8003ef4 <__sflush_r+0xac>
 8003ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ec8:	4299      	cmp	r1, r3
 8003eca:	d002      	beq.n	8003ed2 <__sflush_r+0x8a>
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f7ff fec5 	bl	8003c5c <_free_r>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ed6:	e00d      	b.n	8003ef4 <__sflush_r+0xac>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4628      	mov	r0, r5
 8003edc:	47b0      	blx	r6
 8003ede:	4602      	mov	r2, r0
 8003ee0:	1c50      	adds	r0, r2, #1
 8003ee2:	d1c9      	bne.n	8003e78 <__sflush_r+0x30>
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0c6      	beq.n	8003e78 <__sflush_r+0x30>
 8003eea:	2b1d      	cmp	r3, #29
 8003eec:	d001      	beq.n	8003ef2 <__sflush_r+0xaa>
 8003eee:	2b16      	cmp	r3, #22
 8003ef0:	d11d      	bne.n	8003f2e <__sflush_r+0xe6>
 8003ef2:	602f      	str	r7, [r5, #0]
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	e021      	b.n	8003f3c <__sflush_r+0xf4>
 8003ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003efc:	b21b      	sxth	r3, r3
 8003efe:	e01a      	b.n	8003f36 <__sflush_r+0xee>
 8003f00:	690f      	ldr	r7, [r1, #16]
 8003f02:	2f00      	cmp	r7, #0
 8003f04:	d0f6      	beq.n	8003ef4 <__sflush_r+0xac>
 8003f06:	0793      	lsls	r3, r2, #30
 8003f08:	bf18      	it	ne
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	680e      	ldr	r6, [r1, #0]
 8003f0e:	bf08      	it	eq
 8003f10:	694b      	ldreq	r3, [r1, #20]
 8003f12:	1bf6      	subs	r6, r6, r7
 8003f14:	600f      	str	r7, [r1, #0]
 8003f16:	608b      	str	r3, [r1, #8]
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	ddeb      	ble.n	8003ef4 <__sflush_r+0xac>
 8003f1c:	4633      	mov	r3, r6
 8003f1e:	463a      	mov	r2, r7
 8003f20:	4628      	mov	r0, r5
 8003f22:	6a21      	ldr	r1, [r4, #32]
 8003f24:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003f28:	47e0      	blx	ip
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	dc07      	bgt.n	8003f3e <__sflush_r+0xf6>
 8003f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f36:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3e:	4407      	add	r7, r0
 8003f40:	1a36      	subs	r6, r6, r0
 8003f42:	e7e9      	b.n	8003f18 <__sflush_r+0xd0>
 8003f44:	20400001 	.word	0x20400001

08003f48 <_fflush_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	b913      	cbnz	r3, 8003f58 <_fflush_r+0x10>
 8003f52:	2500      	movs	r5, #0
 8003f54:	4628      	mov	r0, r5
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	b118      	cbz	r0, 8003f62 <_fflush_r+0x1a>
 8003f5a:	6a03      	ldr	r3, [r0, #32]
 8003f5c:	b90b      	cbnz	r3, 8003f62 <_fflush_r+0x1a>
 8003f5e:	f7ff fc87 	bl	8003870 <__sinit>
 8003f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f3      	beq.n	8003f52 <_fflush_r+0xa>
 8003f6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f6c:	07d0      	lsls	r0, r2, #31
 8003f6e:	d404      	bmi.n	8003f7a <_fflush_r+0x32>
 8003f70:	0599      	lsls	r1, r3, #22
 8003f72:	d402      	bmi.n	8003f7a <_fflush_r+0x32>
 8003f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f76:	f7ff fe60 	bl	8003c3a <__retarget_lock_acquire_recursive>
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	f7ff ff63 	bl	8003e48 <__sflush_r>
 8003f82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f84:	4605      	mov	r5, r0
 8003f86:	07da      	lsls	r2, r3, #31
 8003f88:	d4e4      	bmi.n	8003f54 <_fflush_r+0xc>
 8003f8a:	89a3      	ldrh	r3, [r4, #12]
 8003f8c:	059b      	lsls	r3, r3, #22
 8003f8e:	d4e1      	bmi.n	8003f54 <_fflush_r+0xc>
 8003f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f92:	f7ff fe53 	bl	8003c3c <__retarget_lock_release_recursive>
 8003f96:	e7dd      	b.n	8003f54 <_fflush_r+0xc>

08003f98 <__swhatbuf_r>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa0:	4615      	mov	r5, r2
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	461e      	mov	r6, r3
 8003fa6:	b096      	sub	sp, #88	@ 0x58
 8003fa8:	da0c      	bge.n	8003fc4 <__swhatbuf_r+0x2c>
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	2100      	movs	r1, #0
 8003fae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003fb2:	bf14      	ite	ne
 8003fb4:	2340      	movne	r3, #64	@ 0x40
 8003fb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003fba:	2000      	movs	r0, #0
 8003fbc:	6031      	str	r1, [r6, #0]
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	b016      	add	sp, #88	@ 0x58
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	466a      	mov	r2, sp
 8003fc6:	f000 f849 	bl	800405c <_fstat_r>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	dbed      	blt.n	8003faa <__swhatbuf_r+0x12>
 8003fce:	9901      	ldr	r1, [sp, #4]
 8003fd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003fd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003fd8:	4259      	negs	r1, r3
 8003fda:	4159      	adcs	r1, r3
 8003fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fe0:	e7eb      	b.n	8003fba <__swhatbuf_r+0x22>

08003fe2 <__smakebuf_r>:
 8003fe2:	898b      	ldrh	r3, [r1, #12]
 8003fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe6:	079d      	lsls	r5, r3, #30
 8003fe8:	4606      	mov	r6, r0
 8003fea:	460c      	mov	r4, r1
 8003fec:	d507      	bpl.n	8003ffe <__smakebuf_r+0x1c>
 8003fee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	6123      	str	r3, [r4, #16]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	6163      	str	r3, [r4, #20]
 8003ffa:	b003      	add	sp, #12
 8003ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffe:	466a      	mov	r2, sp
 8004000:	ab01      	add	r3, sp, #4
 8004002:	f7ff ffc9 	bl	8003f98 <__swhatbuf_r>
 8004006:	9f00      	ldr	r7, [sp, #0]
 8004008:	4605      	mov	r5, r0
 800400a:	4639      	mov	r1, r7
 800400c:	4630      	mov	r0, r6
 800400e:	f7ff fe8f 	bl	8003d30 <_malloc_r>
 8004012:	b948      	cbnz	r0, 8004028 <__smakebuf_r+0x46>
 8004014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004018:	059a      	lsls	r2, r3, #22
 800401a:	d4ee      	bmi.n	8003ffa <__smakebuf_r+0x18>
 800401c:	f023 0303 	bic.w	r3, r3, #3
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	e7e2      	b.n	8003fee <__smakebuf_r+0xc>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800402e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	9b01      	ldr	r3, [sp, #4]
 8004036:	6020      	str	r0, [r4, #0]
 8004038:	b15b      	cbz	r3, 8004052 <__smakebuf_r+0x70>
 800403a:	4630      	mov	r0, r6
 800403c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004040:	f000 f81e 	bl	8004080 <_isatty_r>
 8004044:	b128      	cbz	r0, 8004052 <__smakebuf_r+0x70>
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	f023 0303 	bic.w	r3, r3, #3
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	431d      	orrs	r5, r3
 8004056:	81a5      	strh	r5, [r4, #12]
 8004058:	e7cf      	b.n	8003ffa <__smakebuf_r+0x18>
	...

0800405c <_fstat_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	2300      	movs	r3, #0
 8004060:	4d06      	ldr	r5, [pc, #24]	@ (800407c <_fstat_r+0x20>)
 8004062:	4604      	mov	r4, r0
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	f7fc fd83 	bl	8000b74 <_fstat>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	d102      	bne.n	8004078 <_fstat_r+0x1c>
 8004072:	682b      	ldr	r3, [r5, #0]
 8004074:	b103      	cbz	r3, 8004078 <_fstat_r+0x1c>
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	bd38      	pop	{r3, r4, r5, pc}
 800407a:	bf00      	nop
 800407c:	200002bc 	.word	0x200002bc

08004080 <_isatty_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2300      	movs	r3, #0
 8004084:	4d05      	ldr	r5, [pc, #20]	@ (800409c <_isatty_r+0x1c>)
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fd81 	bl	8000b92 <_isatty>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_isatty_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_isatty_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200002bc 	.word	0x200002bc

080040a0 <_sbrk_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	2300      	movs	r3, #0
 80040a4:	4d05      	ldr	r5, [pc, #20]	@ (80040bc <_sbrk_r+0x1c>)
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	f7fc fd88 	bl	8000bc0 <_sbrk>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_sbrk_r+0x1a>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_sbrk_r+0x1a>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	200002bc 	.word	0x200002bc

080040c0 <_init>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

080040cc <_fini>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr
