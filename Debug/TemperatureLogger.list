
TemperatureLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004dc8  08004dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e10  08004e10  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004e10  08004e10  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004e10  08004e10  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000068  08004e80  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004e80  000062d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c345  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef0  00000000  00000000  000123d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000142c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a77  00000000  00000000  00015028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018afd  00000000  00000000  00015a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa0b  00000000  00000000  0002e59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c780  00000000  00000000  0003dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  000ca76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ce738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004db0 	.word	0x08004db0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004db0 	.word	0x08004db0

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2iz>:
 80005bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005c4:	d30f      	bcc.n	80005e6 <__aeabi_f2iz+0x2a>
 80005c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d90d      	bls.n	80005ec <__aeabi_f2iz+0x30>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005d8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005dc:	fa23 f002 	lsr.w	r0, r3, r2
 80005e0:	bf18      	it	ne
 80005e2:	4240      	negne	r0, r0
 80005e4:	4770      	bx	lr
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	4770      	bx	lr
 80005ec:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005f0:	d101      	bne.n	80005f6 <__aeabi_f2iz+0x3a>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	d105      	bne.n	8000602 <__aeabi_f2iz+0x46>
 80005f6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80005fa:	bf08      	it	eq
 80005fc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fcd4 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f824 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f908 	bl	8000828 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000618:	f000 f85c 	bl	80006d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800061c:	f000 f888 	bl	8000730 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000620:	f000 f8b4 	bl	800078c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if((TMP100_CheckStatus(&hi2c2) == TMP_READY) && (EEPROM_Init(&hi2c1, &eeprom_handle) == HAL_OK)){ //check if the TMP100 and also the restore eeprom pointer
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <main+0x44>)
 8000626:	f003 fe1b 	bl	8004260 <TMP100_CheckStatus>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d10a      	bne.n	8000646 <main+0x3e>
 8000630:	4907      	ldr	r1, [pc, #28]	@ (8000650 <main+0x48>)
 8000632:	4808      	ldr	r0, [pc, #32]	@ (8000654 <main+0x4c>)
 8000634:	f000 fb48 	bl	8000cc8 <EEPROM_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d103      	bne.n	8000646 <main+0x3e>
	  HAL_TIM_Base_Start_IT(&htim2);  // start timer with interrupt
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <main+0x50>)
 8000640:	f003 fa6c 	bl	8003b1c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <main+0x3e>
 800064a:	bf00      	nop
 800064c:	200000d8 	.word	0x200000d8
 8000650:	20000178 	.word	0x20000178
 8000654:	20000084 	.word	0x20000084
 8000658:	2000012c 	.word	0x2000012c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b090      	sub	sp, #64	@ 0x40
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2228      	movs	r2, #40	@ 0x28
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f8e4 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fdf6 	bl	8003284 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800069e:	f000 f92b 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f864 	bl	8003788 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006c6:	f000 f917 	bl	80008f8 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3740      	adds	r7, #64	@ 0x40
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_I2C1_Init+0x50>)
 80006da:	4a13      	ldr	r2, [pc, #76]	@ (8000728 <MX_I2C1_Init+0x54>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_I2C1_Init+0x50>)
 80006e0:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_I2C1_Init+0x58>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_I2C1_Init+0x50>)
 80006f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_I2C1_Init+0x50>)
 8000712:	f000 ff69 	bl	80015e8 <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f8ec 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000084 	.word	0x20000084
 8000728:	40005400 	.word	0x40005400
 800072c:	00061a80 	.word	0x00061a80

08000730 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C2_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <MX_I2C2_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_I2C2_Init+0x50>)
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_I2C2_Init+0x58>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C2_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_I2C2_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_I2C2_Init+0x50>)
 800074e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_I2C2_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_I2C2_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_I2C2_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_I2C2_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_I2C2_Init+0x50>)
 800076e:	f000 ff3b 	bl	80015e8 <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 f8be 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000d8 	.word	0x200000d8
 8000784:	40005800 	.word	0x40005800
 8000788:	00061a80 	.word	0x00061a80

0800078c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007b2:	f240 321f 	movw	r2, #799	@ 0x31f
 80007b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d2:	4814      	ldr	r0, [pc, #80]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007d4:	f003 f952 	bl	8003a7c <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007de:	f000 f88b 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4619      	mov	r1, r3
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_TIM2_Init+0x98>)
 80007f0:	f003 fad6 	bl	8003da0 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007fa:	f000 f87d 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_TIM2_Init+0x98>)
 800080c:	f003 fcb8 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000816:	f000 f86f 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000012c 	.word	0x2000012c

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_GPIO_Init+0x28>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <MX_GPIO_Init+0x28>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <MX_GPIO_Init+0x28>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000864:	d138      	bne.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x84>
  {
    second_counter++;
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000870:	801a      	strh	r2, [r3, #0]

    if (second_counter >= 600)  // 10 minutes 1sec timer
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800087a:	d32d      	bcc.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x84>
    {
      second_counter = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]

      float temp = 0.0;
 8000882:	f04f 0300 	mov.w	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
      if(TMP100_ReadTemperature_OneShot(&hi2c2, &temp) == TMP_READY)
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000890:	f003 fd0a 	bl	80042a8 <TMP100_ReadTemperature_OneShot>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d11b      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x7e>
      {

    	  int16_t temp_fixed = (int16_t)(temp * 100);
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	4912      	ldr	r1, [pc, #72]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fc54 	bl	800014c <__aeabi_fmul>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe88 	bl	80005bc <__aeabi_f2iz>
 80008ac:	4603      	mov	r3, r0
 80008ae:	82fb      	strh	r3, [r7, #22]
    	  uint8_t data[2] = {
    			  (uint8_t)(temp_fixed >> 8),
 80008b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b4:	121b      	asrs	r3, r3, #8
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
    	  uint8_t data[2] = {
 80008ba:	733b      	strb	r3, [r7, #12]
				  (uint8_t)(temp_fixed & 0xFF)
 80008bc:	8afb      	ldrh	r3, [r7, #22]
 80008be:	b2db      	uxtb	r3, r3
    	  uint8_t data[2] = {
 80008c0:	737b      	strb	r3, [r7, #13]
    	  	  	  };
    	  EEPROM_WriteBytes(&hi2c1,  &eeprom_handle, data, 2);
 80008c2:	f107 020c 	add.w	r2, r7, #12
 80008c6:	2302      	movs	r3, #2
 80008c8:	4908      	ldr	r1, [pc, #32]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x98>)
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008cc:	f000 fab1 	bl	8000e32 <EEPROM_WriteBytes>
      else{
    	  printf("TMP100 I2C Read Failed!\r\n");
      }
    }
  }
}
 80008d0:	e002      	b.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x84>
    	  printf("TMP100 I2C Read Failed!\r\n");
 80008d2:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008d4:	f003 fed0 	bl	8004678 <puts>
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000174 	.word	0x20000174
 80008e4:	200000d8 	.word	0x200000d8
 80008e8:	42c80000 	.word	0x42c80000
 80008ec:	20000178 	.word	0x20000178
 80008f0:	20000084 	.word	0x20000084
 80008f4:	08004dc8 	.word	0x08004dc8

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_MspInit+0x5c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <HAL_MspInit+0x5c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x5c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_MspInit+0x60>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_MspInit+0x60>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000
 8000964:	40010000 	.word	0x40010000

08000968 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a2b      	ldr	r2, [pc, #172]	@ (8000a30 <HAL_I2C_MspInit+0xc8>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d124      	bne.n	80009d2 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b2a      	ldr	r3, [pc, #168]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a29      	ldr	r2, [pc, #164]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a0:	23c0      	movs	r3, #192	@ 0xc0
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a4:	2312      	movs	r3, #18
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4821      	ldr	r0, [pc, #132]	@ (8000a38 <HAL_I2C_MspInit+0xd0>)
 80009b4:	f000 fc94 	bl	80012e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 80009be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c2:	61d3      	str	r3, [r2, #28]
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009d0:	e029      	b.n	8000a26 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a19      	ldr	r2, [pc, #100]	@ (8000a3c <HAL_I2C_MspInit+0xd4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d124      	bne.n	8000a26 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fa:	2312      	movs	r3, #18
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <HAL_I2C_MspInit+0xd0>)
 8000a0a:	f000 fc69 	bl	80012e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_I2C_MspInit+0xcc>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	@ 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	40005800 	.word	0x40005800

08000a40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a50:	d113      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_TIM_Base_MspInit+0x44>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <HAL_TIM_Base_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_TIM_Base_MspInit+0x44>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	201c      	movs	r0, #28
 8000a70:	f000 fbff 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a74:	201c      	movs	r0, #28
 8000a76:	f000 fc18 	bl	80012aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 fab4 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <TIM2_IRQHandler+0x10>)
 8000ae6:	f003 f86b 	bl	8003bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000012c 	.word	0x2000012c

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
  }
  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <_isatty>:

int _isatty(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f003 fe6c 	bl	80048d4 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20005000 	.word	0x20005000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000184 	.word	0x20000184
 8000c30:	200002d8 	.word	0x200002d8

08000c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c40:	f7ff fff8 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c46:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c48:	4a0c      	ldr	r2, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c5c:	4c09      	ldr	r4, [pc, #36]	@ (8000c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f003 fe39 	bl	80048e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6e:	f7ff fccb 	bl	8000608 <main>
  bx lr
 8000c72:	4770      	bx	lr
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c7c:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 8000c80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c84:	200002d8 	.word	0x200002d8

08000c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>

08000c8a <EEPROM_WaitForWriteCompletion>:
 * @param hi2c pointer to the I@C handle
 * @retvat HAL_Status
 *
 * */
static HAL_StatusTypeDef EEPROM_WaitForWriteCompletion(I2C_HandleTypeDef *hi2c)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
    uint32_t startTick = HAL_GetTick();
 8000c92:	f000 f9e9 	bl	8001068 <HAL_GetTick>
 8000c96:	60f8      	str	r0, [r7, #12]
    while (HAL_I2C_IsDeviceReady(hi2c, EEPROM_I2C_ADDR, 1, 10) != HAL_OK)
 8000c98:	e008      	b.n	8000cac <EEPROM_WaitForWriteCompletion+0x22>
    {
        if ((HAL_GetTick() - startTick) > EEPROM_ACK_TIMEOUT_MS)
 8000c9a:	f000 f9e5 	bl	8001068 <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	2b64      	cmp	r3, #100	@ 0x64
 8000ca6:	d901      	bls.n	8000cac <EEPROM_WaitForWriteCompletion+0x22>
            return HAL_TIMEOUT;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e009      	b.n	8000cc0 <EEPROM_WaitForWriteCompletion+0x36>
    while (HAL_I2C_IsDeviceReady(hi2c, EEPROM_I2C_ADDR, 1, 10) != HAL_OK)
 8000cac:	230a      	movs	r3, #10
 8000cae:	2201      	movs	r2, #1
 8000cb0:	21a0      	movs	r1, #160	@ 0xa0
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f001 fcb4 	bl	8002620 <HAL_I2C_IsDeviceReady>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1ed      	bne.n	8000c9a <EEPROM_WaitForWriteCompletion+0x10>
    }
    return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <EEPROM_Init>:
 * @param[2] EEPROM handle
 * @retval HAL_Status
 *
 * */
HAL_StatusTypeDef EEPROM_Init(I2C_HandleTypeDef *hi2c, EEPROM_Handle *handle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
    handle->status = EEPROM_CheckStatus(hi2c);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f821 	bl	8000d1a <EEPROM_CheckStatus>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	701a      	strb	r2, [r3, #0]
    handle->state = EEPROM_IDLE;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	705a      	strb	r2, [r3, #1]
    handle->write_ptr = EEPROM_DATA_START_ADDR;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2205      	movs	r2, #5
 8000cea:	805a      	strh	r2, [r3, #2]
    handle->read_ptr = EEPROM_DATA_START_ADDR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2205      	movs	r2, #5
 8000cf0:	809a      	strh	r2, [r3, #4]
    handle->used_size = 0;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	80da      	strh	r2, [r3, #6]
    handle->has_wrapped = false;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	721a      	strb	r2, [r3, #8]
    if(EEPROM_RestoreMetadata(hi2c, handle) != HAL_OK){
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f81e 	bl	8000d42 <EEPROM_RestoreMetadata>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <EEPROM_Init+0x48>
    	return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <EEPROM_Init+0x4a>
    }
    return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <EEPROM_CheckStatus>:
 * @param hi2c pointer to the I2C handle
 * @retval EEPROM Status
 *
 * */
EEPROM_Status EEPROM_CheckStatus(I2C_HandleTypeDef *hi2c)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_IsDeviceReady(hi2c, EEPROM_I2C_ADDR, 3, 100) == HAL_OK)
 8000d22:	2364      	movs	r3, #100	@ 0x64
 8000d24:	2203      	movs	r2, #3
 8000d26:	21a0      	movs	r1, #160	@ 0xa0
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f001 fc79 	bl	8002620 <HAL_I2C_IsDeviceReady>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <EEPROM_CheckStatus+0x1e>
        return EEPROM_STATUS_PRESENT;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <EEPROM_CheckStatus+0x20>
    return EEPROM_STATUS_NOT_PRESENT;
 8000d38:	2302      	movs	r3, #2
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <EEPROM_RestoreMetadata>:
 * @param[2] EEPROM structure pointer
 * @retval HAL_Status
 *
 * */
HAL_StatusTypeDef EEPROM_RestoreMetadata(I2C_HandleTypeDef *hi2c, EEPROM_Handle *handle)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b088      	sub	sp, #32
 8000d46:	af04      	add	r7, sp, #16
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
    uint8_t meta[5]; //left one address willingly empty for future addition
    if (HAL_I2C_Mem_Read(hi2c, EEPROM_I2C_ADDR, EEPROM_PTR_META_ADDR, I2C_MEMADD_SIZE_16BIT, meta, 5, HAL_MAX_DELAY) != HAL_OK)
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	2305      	movs	r3, #5
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	2200      	movs	r2, #0
 8000d60:	21a0      	movs	r1, #160	@ 0xa0
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f001 f9e8 	bl	8002138 <HAL_I2C_Mem_Read>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <EEPROM_RestoreMetadata+0x30>
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e02a      	b.n	8000dc8 <EEPROM_RestoreMetadata+0x86>

    handle->write_ptr = (meta[0] << 8) | meta[1];
 8000d72:	7a3b      	ldrb	r3, [r7, #8]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	7a7b      	ldrb	r3, [r7, #9]
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	805a      	strh	r2, [r3, #2]
    handle->used_size = (meta[2] << 8) | meta[3];
 8000d88:	7abb      	ldrb	r3, [r7, #10]
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	80da      	strh	r2, [r3, #6]
    handle->has_wrapped = (meta[4] != 0);
 8000d9e:	7b3b      	ldrb	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	721a      	strb	r2, [r3, #8]

    if (handle->write_ptr < EEPROM_DATA_START_ADDR || handle->write_ptr >= EEPROM_TOTAL_SIZE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	885b      	ldrh	r3, [r3, #2]
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d904      	bls.n	8000dc0 <EEPROM_RestoreMetadata+0x7e>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	da02      	bge.n	8000dc6 <EEPROM_RestoreMetadata+0x84>
        handle->write_ptr = EEPROM_DATA_START_ADDR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	805a      	strh	r2, [r3, #2]

    return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <EEPROM_StoreMetadata>:
 * @param[2] EEPROM structure pointer
 * @retval void
 *
 * */
void EEPROM_StoreMetadata(I2C_HandleTypeDef *hi2c, EEPROM_Handle *handle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af04      	add	r7, sp, #16
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
    uint8_t meta[5];
    meta[0] = (handle->write_ptr >> 8);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	885b      	ldrh	r3, [r3, #2]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	723b      	strb	r3, [r7, #8]
    meta[1] = (handle->write_ptr & 0xFF);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	727b      	strb	r3, [r7, #9]
    meta[2] = (handle->used_size >> 8);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	88db      	ldrh	r3, [r3, #6]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	72bb      	strb	r3, [r7, #10]
    meta[3] = (handle->used_size & 0xFF);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	88db      	ldrh	r3, [r3, #6]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	72fb      	strb	r3, [r7, #11]
    meta[4] = handle->has_wrapped ? 1 : 0;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	7a1b      	ldrb	r3, [r3, #8]
 8000e06:	733b      	strb	r3, [r7, #12]

    HAL_I2C_Mem_Write(hi2c, EEPROM_I2C_ADDR, EEPROM_PTR_META_ADDR, I2C_MEMADD_SIZE_16BIT, meta, 5, HAL_MAX_DELAY);
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	9302      	str	r3, [sp, #8]
 8000e0e:	2305      	movs	r3, #5
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2310      	movs	r3, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	21a0      	movs	r1, #160	@ 0xa0
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f001 f890 	bl	8001f44 <HAL_I2C_Mem_Write>
    EEPROM_WaitForWriteCompletion(hi2c);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff30 	bl	8000c8a <EEPROM_WaitForWriteCompletion>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <EEPROM_WriteBytes>:
 * @param[4] size of data to be written
 * @retval HAL_Status
 *
 * */
HAL_StatusTypeDef EEPROM_WriteBytes(I2C_HandleTypeDef *hi2c, EEPROM_Handle *handle, uint8_t *data, uint16_t size)
{
 8000e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e36:	b08b      	sub	sp, #44	@ 0x2c
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	807b      	strh	r3, [r7, #2]
    if (handle->status != EEPROM_STATUS_PRESENT || handle->state == EEPROM_BUSY)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d103      	bne.n	8000e52 <EEPROM_WriteBytes+0x20>
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <EEPROM_WriteBytes+0x24>
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0aa      	b.n	8000fac <EEPROM_WriteBytes+0x17a>

    handle->state = EEPROM_BUSY;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	705a      	strb	r2, [r3, #1]

    while (size > 0) {
 8000e5c:	e09a      	b.n	8000f94 <EEPROM_WriteBytes+0x162>
 8000e5e:	466b      	mov	r3, sp
 8000e60:	461e      	mov	r6, r3
        if (handle->write_ptr >= EEPROM_TOTAL_SIZE) {
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	885b      	ldrh	r3, [r3, #2]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da05      	bge.n	8000e78 <EEPROM_WriteBytes+0x46>
            handle->write_ptr = EEPROM_DATA_START_ADDR;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2205      	movs	r2, #5
 8000e70:	805a      	strh	r2, [r3, #2]
            handle->has_wrapped = true;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2201      	movs	r2, #1
 8000e76:	721a      	strb	r2, [r3, #8]
        }

        uint16_t page_offset = handle->write_ptr % EEPROM_PAGE_SIZE;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	885b      	ldrh	r3, [r3, #2]
 8000e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e80:	83fb      	strh	r3, [r7, #30]
        uint16_t space_in_page = EEPROM_PAGE_SIZE - page_offset;
 8000e82:	8bfb      	ldrh	r3, [r7, #30]
 8000e84:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e88:	83bb      	strh	r3, [r7, #28]
        uint16_t chunk_size = (size < space_in_page) ? size : space_in_page;
 8000e8a:	8bba      	ldrh	r2, [r7, #28]
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	bf28      	it	cs
 8000e92:	4613      	movcs	r3, r2
 8000e94:	837b      	strh	r3, [r7, #26]

        uint8_t buffer[chunk_size + 2];
 8000e96:	8b7b      	ldrh	r3, [r7, #26]
 8000e98:	1c99      	adds	r1, r3, #2
 8000e9a:	1e4b      	subs	r3, r1, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4614      	mov	r4, r2
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	00eb      	lsls	r3, r5, #3
 8000eb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000eb4:	00e2      	lsls	r2, r4, #3
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4690      	mov	r8, r2
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	3307      	adds	r3, #7
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	ebad 0d03 	sub.w	sp, sp, r3
 8000ede:	ab02      	add	r3, sp, #8
 8000ee0:	3300      	adds	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
        buffer[0] = (handle->write_ptr >> 8) & 0xFF;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	885b      	ldrh	r3, [r3, #2]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	701a      	strb	r2, [r3, #0]
        buffer[1] = handle->write_ptr & 0xFF;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	885b      	ldrh	r3, [r3, #2]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	705a      	strb	r2, [r3, #1]
        memcpy(&buffer[2], data, chunk_size);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	3302      	adds	r3, #2
 8000f00:	8b7a      	ldrh	r2, [r7, #26]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fd12 	bl	800492e <memcpy>

        if (HAL_I2C_Master_Transmit(hi2c, EEPROM_I2C_ADDR, buffer, chunk_size + 2, HAL_MAX_DELAY) != HAL_OK) {
 8000f0a:	8b7b      	ldrh	r3, [r7, #26]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	21a0      	movs	r1, #160	@ 0xa0
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 fca8 	bl	8001870 <HAL_I2C_Master_Transmit>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <EEPROM_WriteBytes+0xfe>
            handle->state = EEPROM_IDLE;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	705a      	strb	r2, [r3, #1]
            return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e02f      	b.n	8000f90 <EEPROM_WriteBytes+0x15e>
        }

        if (EEPROM_WaitForWriteCompletion(hi2c) != HAL_OK) {
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff feaa 	bl	8000c8a <EEPROM_WaitForWriteCompletion>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <EEPROM_WriteBytes+0x114>
                    handle->state = EEPROM_IDLE;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
                    return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e024      	b.n	8000f90 <EEPROM_WriteBytes+0x15e>
        }

        handle->write_ptr += chunk_size;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	885a      	ldrh	r2, [r3, #2]
 8000f4a:	8b7b      	ldrh	r3, [r7, #26]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	805a      	strh	r2, [r3, #2]
        handle->used_size += chunk_size;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	88da      	ldrh	r2, [r3, #6]
 8000f58:	8b7b      	ldrh	r3, [r7, #26]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	80da      	strh	r2, [r3, #6]
        if (handle->used_size > EEPROM_MAX_USABLE_SIZE) {
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	88db      	ldrh	r3, [r3, #6]
 8000f66:	f647 72fb 	movw	r2, #32763	@ 0x7ffb
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d906      	bls.n	8000f7c <EEPROM_WriteBytes+0x14a>
            handle->used_size = EEPROM_MAX_USABLE_SIZE;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f647 72fb 	movw	r2, #32763	@ 0x7ffb
 8000f74:	80da      	strh	r2, [r3, #6]
            handle->has_wrapped = true;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	721a      	strb	r2, [r3, #8]
        }

        data += chunk_size;
 8000f7c:	8b7b      	ldrh	r3, [r7, #26]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	607b      	str	r3, [r7, #4]
        size -= chunk_size;
 8000f84:	887a      	ldrh	r2, [r7, #2]
 8000f86:	8b7b      	ldrh	r3, [r7, #26]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	46b5      	mov	sp, r6
 8000f8e:	e001      	b.n	8000f94 <EEPROM_WriteBytes+0x162>
            return HAL_ERROR;
 8000f90:	46b5      	mov	sp, r6
 8000f92:	e00b      	b.n	8000fac <EEPROM_WriteBytes+0x17a>
    while (size > 0) {
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f47f af61 	bne.w	8000e5e <EEPROM_WriteBytes+0x2c>
    }

    EEPROM_StoreMetadata(hi2c, handle);
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff ff16 	bl	8000dd0 <EEPROM_StoreMetadata>
    handle->state = EEPROM_IDLE;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	705a      	strb	r2, [r3, #1]
    return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3724      	adds	r7, #36	@ 0x24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_Init+0x28>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_Init+0x28>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f947 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fc96 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f95f 	bl	80012c6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f927 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <HAL_IncTick+0x20>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000008 	.word	0x20000008
 8001064:	20000188 	.word	0x20000188

08001068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	@ (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	20000188 	.word	0x20000188

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fff0 	bl	8001068 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4906      	ldr	r1, [pc, #24]	@ (800115c <__NVIC_EnableIRQ+0x34>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff90 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff2d 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff42 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff35 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b08b      	sub	sp, #44	@ 0x2c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e169      	b.n	80015c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f4:	2201      	movs	r2, #1
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8158 	bne.w	80015c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a9a      	ldr	r2, [pc, #616]	@ (8001580 <HAL_GPIO_Init+0x2a0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d05e      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 800131c:	4a98      	ldr	r2, [pc, #608]	@ (8001580 <HAL_GPIO_Init+0x2a0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d875      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 8001322:	4a98      	ldr	r2, [pc, #608]	@ (8001584 <HAL_GPIO_Init+0x2a4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d058      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 8001328:	4a96      	ldr	r2, [pc, #600]	@ (8001584 <HAL_GPIO_Init+0x2a4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d86f      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 800132e:	4a96      	ldr	r2, [pc, #600]	@ (8001588 <HAL_GPIO_Init+0x2a8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d052      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 8001334:	4a94      	ldr	r2, [pc, #592]	@ (8001588 <HAL_GPIO_Init+0x2a8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d869      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 800133a:	4a94      	ldr	r2, [pc, #592]	@ (800158c <HAL_GPIO_Init+0x2ac>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d04c      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 8001340:	4a92      	ldr	r2, [pc, #584]	@ (800158c <HAL_GPIO_Init+0x2ac>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d863      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 8001346:	4a92      	ldr	r2, [pc, #584]	@ (8001590 <HAL_GPIO_Init+0x2b0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d046      	beq.n	80013da <HAL_GPIO_Init+0xfa>
 800134c:	4a90      	ldr	r2, [pc, #576]	@ (8001590 <HAL_GPIO_Init+0x2b0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d85d      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 8001352:	2b12      	cmp	r3, #18
 8001354:	d82a      	bhi.n	80013ac <HAL_GPIO_Init+0xcc>
 8001356:	2b12      	cmp	r3, #18
 8001358:	d859      	bhi.n	800140e <HAL_GPIO_Init+0x12e>
 800135a:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <HAL_GPIO_Init+0x80>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	080013db 	.word	0x080013db
 8001364:	080013b5 	.word	0x080013b5
 8001368:	080013c7 	.word	0x080013c7
 800136c:	08001409 	.word	0x08001409
 8001370:	0800140f 	.word	0x0800140f
 8001374:	0800140f 	.word	0x0800140f
 8001378:	0800140f 	.word	0x0800140f
 800137c:	0800140f 	.word	0x0800140f
 8001380:	0800140f 	.word	0x0800140f
 8001384:	0800140f 	.word	0x0800140f
 8001388:	0800140f 	.word	0x0800140f
 800138c:	0800140f 	.word	0x0800140f
 8001390:	0800140f 	.word	0x0800140f
 8001394:	0800140f 	.word	0x0800140f
 8001398:	0800140f 	.word	0x0800140f
 800139c:	0800140f 	.word	0x0800140f
 80013a0:	0800140f 	.word	0x0800140f
 80013a4:	080013bd 	.word	0x080013bd
 80013a8:	080013d1 	.word	0x080013d1
 80013ac:	4a79      	ldr	r2, [pc, #484]	@ (8001594 <HAL_GPIO_Init+0x2b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013b2:	e02c      	b.n	800140e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e029      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	3304      	adds	r3, #4
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e024      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	3308      	adds	r3, #8
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e01f      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	330c      	adds	r3, #12
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e01a      	b.n	8001410 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013e2:	2304      	movs	r3, #4
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e013      	b.n	8001410 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	611a      	str	r2, [r3, #16]
          break;
 80013fa:	e009      	b.n	8001410 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013fc:	2308      	movs	r3, #8
 80013fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	615a      	str	r2, [r3, #20]
          break;
 8001406:	e003      	b.n	8001410 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x130>
          break;
 800140e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	@ 0xff
 8001414:	d801      	bhi.n	800141a <HAL_GPIO_Init+0x13a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	e001      	b.n	800141e <HAL_GPIO_Init+0x13e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3304      	adds	r3, #4
 800141e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2bff      	cmp	r3, #255	@ 0xff
 8001424:	d802      	bhi.n	800142c <HAL_GPIO_Init+0x14c>
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x152>
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	3b08      	subs	r3, #8
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	210f      	movs	r1, #15
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	401a      	ands	r2, r3
 8001444:	6a39      	ldr	r1, [r7, #32]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	431a      	orrs	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80b1 	beq.w	80015c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <HAL_GPIO_Init+0x2b8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a4c      	ldr	r2, [pc, #304]	@ (8001598 <HAL_GPIO_Init+0x2b8>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b4a      	ldr	r3, [pc, #296]	@ (8001598 <HAL_GPIO_Init+0x2b8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001478:	4a48      	ldr	r2, [pc, #288]	@ (800159c <HAL_GPIO_Init+0x2bc>)
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a40      	ldr	r2, [pc, #256]	@ (80015a0 <HAL_GPIO_Init+0x2c0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d013      	beq.n	80014cc <HAL_GPIO_Init+0x1ec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3f      	ldr	r2, [pc, #252]	@ (80015a4 <HAL_GPIO_Init+0x2c4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00d      	beq.n	80014c8 <HAL_GPIO_Init+0x1e8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	@ (80015a8 <HAL_GPIO_Init+0x2c8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x1e4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a3d      	ldr	r2, [pc, #244]	@ (80015ac <HAL_GPIO_Init+0x2cc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_GPIO_Init+0x1e0>
 80014bc:	2303      	movs	r3, #3
 80014be:	e006      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e004      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_GPIO_Init+0x1ee>
 80014cc:	2300      	movs	r3, #0
 80014ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d0:	f002 0203 	and.w	r2, r2, #3
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4093      	lsls	r3, r2
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014de:	492f      	ldr	r1, [pc, #188]	@ (800159c <HAL_GPIO_Init+0x2bc>)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f8:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	492c      	ldr	r1, [pc, #176]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	4928      	ldr	r1, [pc, #160]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001510:	4013      	ands	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001520:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	4922      	ldr	r1, [pc, #136]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	60cb      	str	r3, [r1, #12]
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	43db      	mvns	r3, r3
 8001536:	491e      	ldr	r1, [pc, #120]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001538:	4013      	ands	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4918      	ldr	r1, [pc, #96]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	4914      	ldr	r1, [pc, #80]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d021      	beq.n	80015b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	490e      	ldr	r1, [pc, #56]	@ (80015b0 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
 800157c:	e021      	b.n	80015c2 <HAL_GPIO_Init+0x2e2>
 800157e:	bf00      	nop
 8001580:	10320000 	.word	0x10320000
 8001584:	10310000 	.word	0x10310000
 8001588:	10220000 	.word	0x10220000
 800158c:	10210000 	.word	0x10210000
 8001590:	10120000 	.word	0x10120000
 8001594:	10110000 	.word	0x10110000
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	40011000 	.word	0x40011000
 80015ac:	40011400 	.word	0x40011400
 80015b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_GPIO_Init+0x304>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	4909      	ldr	r1, [pc, #36]	@ (80015e4 <HAL_GPIO_Init+0x304>)
 80015be:	4013      	ands	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	3301      	adds	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f47f ae8e 	bne.w	80012f4 <HAL_GPIO_Init+0x14>
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	372c      	adds	r7, #44	@ 0x2c
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e12b      	b.n	8001852 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff f9aa 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2224      	movs	r2, #36	@ 0x24
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800163a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800164a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800164c:	f002 f9e4 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8001650:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a81      	ldr	r2, [pc, #516]	@ (800185c <HAL_I2C_Init+0x274>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d807      	bhi.n	800166c <HAL_I2C_Init+0x84>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a80      	ldr	r2, [pc, #512]	@ (8001860 <HAL_I2C_Init+0x278>)
 8001660:	4293      	cmp	r3, r2
 8001662:	bf94      	ite	ls
 8001664:	2301      	movls	r3, #1
 8001666:	2300      	movhi	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	e006      	b.n	800167a <HAL_I2C_Init+0x92>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4a7d      	ldr	r2, [pc, #500]	@ (8001864 <HAL_I2C_Init+0x27c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	bf94      	ite	ls
 8001674:	2301      	movls	r3, #1
 8001676:	2300      	movhi	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0e7      	b.n	8001852 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4a78      	ldr	r2, [pc, #480]	@ (8001868 <HAL_I2C_Init+0x280>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0c9b      	lsrs	r3, r3, #18
 800168c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a6a      	ldr	r2, [pc, #424]	@ (800185c <HAL_I2C_Init+0x274>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d802      	bhi.n	80016bc <HAL_I2C_Init+0xd4>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	e009      	b.n	80016d0 <HAL_I2C_Init+0xe8>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	4a69      	ldr	r2, [pc, #420]	@ (800186c <HAL_I2C_Init+0x284>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	3301      	adds	r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	495c      	ldr	r1, [pc, #368]	@ (800185c <HAL_I2C_Init+0x274>)
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d819      	bhi.n	8001724 <HAL_I2C_Init+0x13c>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e59      	subs	r1, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80016fe:	1c59      	adds	r1, r3, #1
 8001700:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001704:	400b      	ands	r3, r1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <HAL_I2C_Init+0x138>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e59      	subs	r1, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fbb1 f3f3 	udiv	r3, r1, r3
 8001718:	3301      	adds	r3, #1
 800171a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171e:	e051      	b.n	80017c4 <HAL_I2C_Init+0x1dc>
 8001720:	2304      	movs	r3, #4
 8001722:	e04f      	b.n	80017c4 <HAL_I2C_Init+0x1dc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d111      	bne.n	8001750 <HAL_I2C_Init+0x168>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1e58      	subs	r0, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6859      	ldr	r1, [r3, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	440b      	add	r3, r1
 800173a:	fbb0 f3f3 	udiv	r3, r0, r3
 800173e:	3301      	adds	r3, #1
 8001740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	e012      	b.n	8001776 <HAL_I2C_Init+0x18e>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e58      	subs	r0, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	0099      	lsls	r1, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Init+0x196>
 800177a:	2301      	movs	r3, #1
 800177c:	e022      	b.n	80017c4 <HAL_I2C_Init+0x1dc>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <HAL_I2C_Init+0x1bc>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1e58      	subs	r0, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6859      	ldr	r1, [r3, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	440b      	add	r3, r1
 8001794:	fbb0 f3f3 	udiv	r3, r0, r3
 8001798:	3301      	adds	r3, #1
 800179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017a2:	e00f      	b.n	80017c4 <HAL_I2C_Init+0x1dc>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1e58      	subs	r0, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6859      	ldr	r1, [r3, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	0099      	lsls	r1, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	6809      	ldr	r1, [r1, #0]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6911      	ldr	r1, [r2, #16]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68d2      	ldr	r2, [r2, #12]
 80017fe:	4311      	orrs	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	430b      	orrs	r3, r1
 8001806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	000186a0 	.word	0x000186a0
 8001860:	001e847f 	.word	0x001e847f
 8001864:	003d08ff 	.word	0x003d08ff
 8001868:	431bde83 	.word	0x431bde83
 800186c:	10624dd3 	.word	0x10624dd3

08001870 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	461a      	mov	r2, r3
 800187c:	460b      	mov	r3, r1
 800187e:	817b      	strh	r3, [r7, #10]
 8001880:	4613      	mov	r3, r2
 8001882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff fbf0 	bl	8001068 <HAL_GetTick>
 8001888:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b20      	cmp	r3, #32
 8001894:	f040 80e0 	bne.w	8001a58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2319      	movs	r3, #25
 800189e:	2201      	movs	r2, #1
 80018a0:	4970      	ldr	r1, [pc, #448]	@ (8001a64 <HAL_I2C_Master_Transmit+0x1f4>)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f001 fab8 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0d3      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_I2C_Master_Transmit+0x50>
 80018bc:	2302      	movs	r3, #2
 80018be:	e0cc      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1ea>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d007      	beq.n	80018e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2221      	movs	r2, #33	@ 0x21
 80018fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2210      	movs	r2, #16
 8001902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	893a      	ldrh	r2, [r7, #8]
 8001916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4a50      	ldr	r2, [pc, #320]	@ (8001a68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001928:	8979      	ldrh	r1, [r7, #10]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	6a3a      	ldr	r2, [r7, #32]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 ffa4 	bl	800287c <I2C_MasterRequestWrite>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e08d      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001954:	e066      	b.n	8001a24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	6a39      	ldr	r1, [r7, #32]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f001 fb76 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	2b04      	cmp	r3, #4
 800196c:	d107      	bne.n	800197e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800197c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06b      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d11b      	bne.n	80019f8 <HAL_I2C_Master_Transmit+0x188>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d017      	beq.n	80019f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	6a39      	ldr	r1, [r7, #32]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f001 fb6d 	bl	80030dc <I2C_WaitOnBTFFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d107      	bne.n	8001a20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e01a      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d194      	bne.n	8001956 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	00100002 	.word	0x00100002
 8001a68:	ffff0000 	.word	0xffff0000

08001a6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	@ 0x30
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	460b      	mov	r3, r1
 8001a7a:	817b      	strh	r3, [r7, #10]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff faf0 	bl	8001068 <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	f040 824b 	bne.w	8001f2e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2319      	movs	r3, #25
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	497f      	ldr	r1, [pc, #508]	@ (8001ca0 <HAL_I2C_Master_Receive+0x234>)
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f001 f9b8 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e23e      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_I2C_Master_Receive+0x54>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e237      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d007      	beq.n	8001ae6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2222      	movs	r2, #34	@ 0x22
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2210      	movs	r2, #16
 8001b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	893a      	ldrh	r2, [r7, #8]
 8001b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca4 <HAL_I2C_Master_Receive+0x238>)
 8001b26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b28:	8979      	ldrh	r1, [r7, #10]
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 ff26 	bl	8002980 <I2C_MasterRequestRead>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1f8      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d113      	bne.n	8001b6e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e1cc      	b.n	8001f08 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d11e      	bne.n	8001bb4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b86:	b672      	cpsid	i
}
 8001b88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb0:	b662      	cpsie	i
}
 8001bb2:	e035      	b.n	8001c20 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d11e      	bne.n	8001bfa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf6:	b662      	cpsie	i
}
 8001bf8:	e012      	b.n	8001c20 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001c20:	e172      	b.n	8001f08 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	f200 811f 	bhi.w	8001e6a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d123      	bne.n	8001c7c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f001 fa97 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e173      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c7a:	e145      	b.n	8001f08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d152      	bne.n	8001d2a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4906      	ldr	r1, [pc, #24]	@ (8001ca8 <HAL_I2C_Master_Receive+0x23c>)
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f001 f8c2 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e148      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
 8001c9e:	bf00      	nop
 8001ca0:	00100002 	.word	0x00100002
 8001ca4:	ffff0000 	.word	0xffff0000
 8001ca8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cf2:	b662      	cpsie	i
}
 8001cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d28:	e0ee      	b.n	8001f08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d30:	2200      	movs	r2, #0
 8001d32:	4981      	ldr	r1, [pc, #516]	@ (8001f38 <HAL_I2C_Master_Receive+0x4cc>)
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f001 f86f 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0f5      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f3c <HAL_I2C_Master_Receive+0x4d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	4a6b      	ldr	r2, [pc, #428]	@ (8001f40 <HAL_I2C_Master_Receive+0x4d4>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0a1a      	lsrs	r2, r3, #8
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00da      	lsls	r2, r3, #3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d118      	bne.n	8001de2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f043 0220 	orr.w	r2, r3, #32
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001dd2:	b662      	cpsie	i
}
 8001dd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0a6      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d1d9      	bne.n	8001da4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e32:	b662      	cpsie	i
}
 8001e34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e68:	e04e      	b.n	8001f08 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f001 f97c 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e058      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d124      	bne.n	8001f08 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f ae88 	bne.w	8001c22 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	00010004 	.word	0x00010004
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	14f8b589 	.word	0x14f8b589

08001f44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	460b      	mov	r3, r1
 8001f58:	813b      	strh	r3, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f5e:	f7ff f883 	bl	8001068 <HAL_GetTick>
 8001f62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	f040 80d9 	bne.w	8002124 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2319      	movs	r3, #25
 8001f78:	2201      	movs	r2, #1
 8001f7a:	496d      	ldr	r1, [pc, #436]	@ (8002130 <HAL_I2C_Mem_Write+0x1ec>)
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 ff4b 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0cc      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_I2C_Mem_Write+0x56>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e0c5      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d007      	beq.n	8001fc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2221      	movs	r2, #33	@ 0x21
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a4d      	ldr	r2, [pc, #308]	@ (8002134 <HAL_I2C_Mem_Write+0x1f0>)
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002002:	88f8      	ldrh	r0, [r7, #6]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	8979      	ldrh	r1, [r7, #10]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4603      	mov	r3, r0
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fd82 	bl	8002b1c <I2C_RequestMemoryWrite>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d052      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e081      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f001 f810 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b04      	cmp	r3, #4
 8002038:	d107      	bne.n	800204a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b04      	cmp	r3, #4
 800208a:	d11b      	bne.n	80020c4 <HAL_I2C_Mem_Write+0x180>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d017      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1aa      	bne.n	8002022 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f001 f803 	bl	80030dc <I2C_WaitOnBTFFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d107      	bne.n	80020f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e016      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	00100002 	.word	0x00100002
 8002134:	ffff0000 	.word	0xffff0000

08002138 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	@ 0x30
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002156:	f7fe ff87 	bl	8001068 <HAL_GetTick>
 800215a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	f040 8250 	bne.w	800260a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2319      	movs	r3, #25
 8002170:	2201      	movs	r2, #1
 8002172:	4982      	ldr	r1, [pc, #520]	@ (800237c <HAL_I2C_Mem_Read+0x244>)
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fe4f 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002180:	2302      	movs	r3, #2
 8002182:	e243      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Mem_Read+0x5a>
 800218e:	2302      	movs	r3, #2
 8002190:	e23c      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d007      	beq.n	80021b8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2222      	movs	r2, #34	@ 0x22
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2240      	movs	r2, #64	@ 0x40
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a62      	ldr	r2, [pc, #392]	@ (8002380 <HAL_I2C_Mem_Read+0x248>)
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021fa:	88f8      	ldrh	r0, [r7, #6]
 80021fc:	893a      	ldrh	r2, [r7, #8]
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4603      	mov	r3, r0
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fd1c 	bl	8002c48 <I2C_RequestMemoryRead>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1f8      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	2b00      	cmp	r3, #0
 8002220:	d113      	bne.n	800224a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e1cc      	b.n	80025e4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224e:	2b01      	cmp	r3, #1
 8002250:	d11e      	bne.n	8002290 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002260:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002262:	b672      	cpsid	i
}
 8002264:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800228c:	b662      	cpsie	i
}
 800228e:	e035      	b.n	80022fc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002294:	2b02      	cmp	r3, #2
 8002296:	d11e      	bne.n	80022d6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022d2:	b662      	cpsie	i
}
 80022d4:	e012      	b.n	80022fc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022e4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022fc:	e172      	b.n	80025e4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002302:	2b03      	cmp	r3, #3
 8002304:	f200 811f 	bhi.w	8002546 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230c:	2b01      	cmp	r3, #1
 800230e:	d123      	bne.n	8002358 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002312:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 ff29 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e173      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002356:	e145      	b.n	80025e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235c:	2b02      	cmp	r3, #2
 800235e:	d152      	bne.n	8002406 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002366:	2200      	movs	r2, #0
 8002368:	4906      	ldr	r1, [pc, #24]	@ (8002384 <HAL_I2C_Mem_Read+0x24c>)
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fd54 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e148      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
 800237a:	bf00      	nop
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000
 8002384:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002388:	b672      	cpsid	i
}
 800238a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023ce:	b662      	cpsie	i
}
 80023d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002404:	e0ee      	b.n	80025e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240c:	2200      	movs	r2, #0
 800240e:	4981      	ldr	r1, [pc, #516]	@ (8002614 <HAL_I2C_Mem_Read+0x4dc>)
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fd01 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0f5      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800242e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002430:	b672      	cpsid	i
}
 8002432:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002466:	4b6c      	ldr	r3, [pc, #432]	@ (8002618 <HAL_I2C_Mem_Read+0x4e0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	08db      	lsrs	r3, r3, #3
 800246c:	4a6b      	ldr	r2, [pc, #428]	@ (800261c <HAL_I2C_Mem_Read+0x4e4>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a1a      	lsrs	r2, r3, #8
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00da      	lsls	r2, r3, #3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	3b01      	subs	r3, #1
 8002484:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d118      	bne.n	80024be <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80024ae:	b662      	cpsie	i
}
 80024b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0a6      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d1d9      	bne.n	8002480 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800250e:	b662      	cpsie	i
}
 8002510:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002544:	e04e      	b.n	80025e4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002548:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fe0e 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e058      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d124      	bne.n	80025e4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f47f ae88 	bne.w	80022fe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	3728      	adds	r7, #40	@ 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	00010004 	.word	0x00010004
 8002618:	20000000 	.word	0x20000000
 800261c:	14f8b589 	.word	0x14f8b589

08002620 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	460b      	mov	r3, r1
 800262e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7fe fd1a 	bl	8001068 <HAL_GetTick>
 8002634:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 8111 	bne.w	800286a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2319      	movs	r3, #25
 800264e:	2201      	movs	r2, #1
 8002650:	4988      	ldr	r1, [pc, #544]	@ (8002874 <HAL_I2C_IsDeviceReady+0x254>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fbe0 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	e104      	b.n	800286c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_I2C_IsDeviceReady+0x50>
 800266c:	2302      	movs	r3, #2
 800266e:	e0fd      	b.n	800286c <HAL_I2C_IsDeviceReady+0x24c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d007      	beq.n	8002696 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2224      	movs	r2, #36	@ 0x24
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a70      	ldr	r2, [pc, #448]	@ (8002878 <HAL_I2C_IsDeviceReady+0x258>)
 80026b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fb9e 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026f0:	d103      	bne.n	80026fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0b6      	b.n	800286c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800270c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800270e:	f7fe fcab 	bl	8001068 <HAL_GetTick>
 8002712:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002742:	e025      	b.n	8002790 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002744:	f7fe fc90 	bl	8001068 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d302      	bcc.n	800275a <HAL_I2C_IsDeviceReady+0x13a>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	22a0      	movs	r2, #160	@ 0xa0
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2ba0      	cmp	r3, #160	@ 0xa0
 800279a:	d005      	beq.n	80027a8 <HAL_I2C_IsDeviceReady+0x188>
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_I2C_IsDeviceReady+0x188>
 80027a2:	7dbb      	ldrb	r3, [r7, #22]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0cd      	beq.n	8002744 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d129      	bne.n	8002812 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2319      	movs	r3, #25
 80027ea:	2201      	movs	r2, #1
 80027ec:	4921      	ldr	r1, [pc, #132]	@ (8002874 <HAL_I2C_IsDeviceReady+0x254>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fb12 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e036      	b.n	800286c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e02c      	b.n	800286c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002820:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800282a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	2319      	movs	r3, #25
 8002832:	2201      	movs	r2, #1
 8002834:	490f      	ldr	r1, [pc, #60]	@ (8002874 <HAL_I2C_IsDeviceReady+0x254>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 faee 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e012      	b.n	800286c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3301      	adds	r3, #1
 800284a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	f4ff af32 	bcc.w	80026ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	00100002 	.word	0x00100002
 8002878:	ffff0000 	.word	0xffff0000

0800287c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d006      	beq.n	80028a6 <I2C_MasterRequestWrite+0x2a>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d003      	beq.n	80028a6 <I2C_MasterRequestWrite+0x2a>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028a4:	d108      	bne.n	80028b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e00b      	b.n	80028d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	2b12      	cmp	r3, #18
 80028be:	d107      	bne.n	80028d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa9b 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00d      	beq.n	8002904 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028f6:	d103      	bne.n	8002900 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e035      	b.n	8002970 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800290c:	d108      	bne.n	8002920 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800291c:	611a      	str	r2, [r3, #16]
 800291e:	e01b      	b.n	8002958 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002920:	897b      	ldrh	r3, [r7, #10]
 8002922:	11db      	asrs	r3, r3, #7
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 0306 	and.w	r3, r3, #6
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f063 030f 	orn	r3, r3, #15
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	490e      	ldr	r1, [pc, #56]	@ (8002978 <I2C_MasterRequestWrite+0xfc>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fae4 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e010      	b.n	8002970 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4907      	ldr	r1, [pc, #28]	@ (800297c <I2C_MasterRequestWrite+0x100>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fad4 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	00010008 	.word	0x00010008
 800297c:	00010002 	.word	0x00010002

08002980 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	460b      	mov	r3, r1
 800298e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d006      	beq.n	80029ba <I2C_MasterRequestRead+0x3a>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d003      	beq.n	80029ba <I2C_MasterRequestRead+0x3a>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029b8:	d108      	bne.n	80029cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e00b      	b.n	80029e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	2b11      	cmp	r3, #17
 80029d2:	d107      	bne.n	80029e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fa11 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0a:	d103      	bne.n	8002a14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e079      	b.n	8002b0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a20:	d108      	bne.n	8002a34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	e05f      	b.n	8002af4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a34:	897b      	ldrh	r3, [r7, #10]
 8002a36:	11db      	asrs	r3, r3, #7
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 0306 	and.w	r3, r3, #6
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f063 030f 	orn	r3, r3, #15
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4930      	ldr	r1, [pc, #192]	@ (8002b14 <I2C_MasterRequestRead+0x194>)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fa5a 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e054      	b.n	8002b0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4929      	ldr	r1, [pc, #164]	@ (8002b18 <I2C_MasterRequestRead+0x198>)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fa4a 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e044      	b.n	8002b0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f9af 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ace:	d103      	bne.n	8002ad8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e017      	b.n	8002b0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	11db      	asrs	r3, r3, #7
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f003 0306 	and.w	r3, r3, #6
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f063 030e 	orn	r3, r3, #14
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4907      	ldr	r1, [pc, #28]	@ (8002b18 <I2C_MasterRequestRead+0x198>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fa06 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	00010008 	.word	0x00010008
 8002b18:	00010002 	.word	0x00010002

08002b1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f960 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6c:	d103      	bne.n	8002b76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e05f      	b.n	8002c3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	492d      	ldr	r1, [pc, #180]	@ (8002c44 <I2C_RequestMemoryWrite+0x128>)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f9bb 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e04c      	b.n	8002c3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fa46 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e02b      	b.n	8002c3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be8:	893b      	ldrh	r3, [r7, #8]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	611a      	str	r2, [r3, #16]
 8002bf2:	e021      	b.n	8002c38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bf4:	893b      	ldrh	r3, [r7, #8]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c04:	6a39      	ldr	r1, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fa20 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d107      	bne.n	8002c2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e005      	b.n	8002c3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c2e:	893b      	ldrh	r3, [r7, #8]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	00010002 	.word	0x00010002

08002c48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	813b      	strh	r3, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f8c2 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ca8:	d103      	bne.n	8002cb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0aa      	b.n	8002e0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	4952      	ldr	r1, [pc, #328]	@ (8002e14 <I2C_RequestMemoryRead+0x1cc>)
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f91d 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e097      	b.n	8002e0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f9a8 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d107      	bne.n	8002d1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e076      	b.n	8002e0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d24:	893b      	ldrh	r3, [r7, #8]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e021      	b.n	8002d74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d40:	6a39      	ldr	r1, [r7, #32]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f982 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d107      	bne.n	8002d66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e050      	b.n	8002e0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d76:	6a39      	ldr	r1, [r7, #32]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f967 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d107      	bne.n	8002d9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e035      	b.n	8002e0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f82b 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd6:	d103      	bne.n	8002de0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e013      	b.n	8002e0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002de4:	897b      	ldrh	r3, [r7, #10]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	4906      	ldr	r1, [pc, #24]	@ (8002e14 <I2C_RequestMemoryRead+0x1cc>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f886 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e048      	b.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d044      	beq.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fe f919 	bl	8001068 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d139      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	e00c      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d116      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e023      	b.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10d      	bne.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	e00c      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d093      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1a:	e071      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2a:	d123      	bne.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e067      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d041      	beq.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fe f874 	bl	8001068 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d136      	bne.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e00b      	b.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e021      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d10c      	bne.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e00b      	b.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f af6d 	bne.w	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003058:	e034      	b.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8e3 	bl	8003226 <I2C_IsAcknowledgeFailed>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e034      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d028      	beq.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fd fff9 	bl	8001068 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11d      	bne.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d016      	beq.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e007      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b80      	cmp	r3, #128	@ 0x80
 80030d0:	d1c3      	bne.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e8:	e034      	b.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f89b 	bl	8003226 <I2C_IsAcknowledgeFailed>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e034      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d028      	beq.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7fd ffb1 	bl	8001068 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d016      	beq.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d1c3      	bne.n	80030ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003178:	e049      	b.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d119      	bne.n	80031bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0210 	mvn.w	r2, #16
 8003190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e030      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031bc:	f7fd ff54 	bl	8001068 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11d      	bne.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	2b40      	cmp	r3, #64	@ 0x40
 80031de:	d016      	beq.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e007      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	d1ae      	bne.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323c:	d11b      	bne.n	8003276 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003246:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
	...

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e272      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8087 	beq.w	80033b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a4:	4b92      	ldr	r3, [pc, #584]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00c      	beq.n	80032ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b0:	4b8f      	ldr	r3, [pc, #572]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d112      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
 80032bc:	4b8c      	ldr	r3, [pc, #560]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ca:	4b89      	ldr	r3, [pc, #548]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x12c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d168      	bne.n	80033b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e24c      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x76>
 80032ec:	4b80      	ldr	r3, [pc, #512]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7f      	ldr	r2, [pc, #508]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e02e      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b7b      	ldr	r3, [pc, #492]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7a      	ldr	r2, [pc, #488]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b78      	ldr	r3, [pc, #480]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a77      	ldr	r2, [pc, #476]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0xbc>
 8003326:	4b72      	ldr	r3, [pc, #456]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a71      	ldr	r2, [pc, #452]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6f      	ldr	r3, [pc, #444]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6e      	ldr	r2, [pc, #440]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 8003340:	4b6b      	ldr	r3, [pc, #428]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6a      	ldr	r2, [pc, #424]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b68      	ldr	r3, [pc, #416]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a67      	ldr	r2, [pc, #412]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fd fe82 	bl	8001068 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fd fe7e 	bl	8001068 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e200      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b5d      	ldr	r3, [pc, #372]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xe4>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fe6e 	bl	8001068 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7fd fe6a 	bl	8001068 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	@ 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1ec      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b53      	ldr	r3, [pc, #332]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x10c>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033be:	4b4c      	ldr	r3, [pc, #304]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ca:	4b49      	ldr	r3, [pc, #292]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
 80033d6:	4b46      	ldr	r3, [pc, #280]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b43      	ldr	r3, [pc, #268]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1c0      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3d      	ldr	r3, [pc, #244]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4939      	ldr	r1, [pc, #228]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b36      	ldr	r3, [pc, #216]	@ (80034f4 <HAL_RCC_OscConfig+0x270>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fd fe23 	bl	8001068 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fd fe1f 	bl	8001068 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2d      	ldr	r3, [pc, #180]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b2a      	ldr	r3, [pc, #168]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4927      	ldr	r1, [pc, #156]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b26      	ldr	r3, [pc, #152]	@ (80034f4 <HAL_RCC_OscConfig+0x270>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fd fe02 	bl	8001068 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fd fdfe 	bl	8001068 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e180      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03a      	beq.n	8003508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d019      	beq.n	80034ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b17      	ldr	r3, [pc, #92]	@ (80034f8 <HAL_RCC_OscConfig+0x274>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fd fde2 	bl	8001068 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fd fdde 	bl	8001068 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e160      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 faba 	bl	8003a40 <RCC_Delay>
 80034cc:	e01c      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <HAL_RCC_OscConfig+0x274>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fd fdc8 	bl	8001068 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034da:	e00f      	b.n	80034fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fd fdc4 	bl	8001068 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d908      	bls.n	80034fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e146      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	42420000 	.word	0x42420000
 80034f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b92      	ldr	r3, [pc, #584]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e9      	bne.n	80034dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a6 	beq.w	8003662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b8b      	ldr	r3, [pc, #556]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b88      	ldr	r3, [pc, #544]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4a87      	ldr	r2, [pc, #540]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003530:	61d3      	str	r3, [r2, #28]
 8003532:	4b85      	ldr	r3, [pc, #532]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b82      	ldr	r3, [pc, #520]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b7f      	ldr	r3, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7e      	ldr	r2, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fd fd85 	bl	8001068 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fd fd81 	bl	8001068 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	@ 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e103      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b75      	ldr	r3, [pc, #468]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x312>
 8003588:	4b6f      	ldr	r3, [pc, #444]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a6e      	ldr	r2, [pc, #440]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e02d      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x334>
 800359e:	4b6a      	ldr	r3, [pc, #424]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a69      	ldr	r2, [pc, #420]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6213      	str	r3, [r2, #32]
 80035aa:	4b67      	ldr	r3, [pc, #412]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a66      	ldr	r2, [pc, #408]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6213      	str	r3, [r2, #32]
 80035b6:	e01c      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10c      	bne.n	80035da <HAL_RCC_OscConfig+0x356>
 80035c0:	4b61      	ldr	r3, [pc, #388]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a60      	ldr	r2, [pc, #384]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035da:	4b5b      	ldr	r3, [pc, #364]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a5a      	ldr	r2, [pc, #360]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	4b58      	ldr	r3, [pc, #352]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a57      	ldr	r2, [pc, #348]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fd fd35 	bl	8001068 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd fd31 	bl	8001068 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0b1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b4b      	ldr	r3, [pc, #300]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCC_OscConfig+0x37e>
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fd fd1f 	bl	8001068 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fd fd1b 	bl	8001068 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e09b      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4b40      	ldr	r3, [pc, #256]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b3c      	ldr	r3, [pc, #240]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a3b      	ldr	r2, [pc, #236]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b36      	ldr	r3, [pc, #216]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d061      	beq.n	800373c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d146      	bne.n	800370e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b33      	ldr	r3, [pc, #204]	@ (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fd fcef 	bl	8001068 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fd fceb 	bl	8001068 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e06d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a0:	4b29      	ldr	r3, [pc, #164]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b4:	d108      	bne.n	80036c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036b6:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4921      	ldr	r1, [pc, #132]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a19      	ldr	r1, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	430b      	orrs	r3, r1
 80036da:	491b      	ldr	r1, [pc, #108]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fcbf 	bl	8001068 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fcbb 	bl	8001068 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003700:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x46a>
 800370c:	e035      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fd fca8 	bl	8001068 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fca4 	bl	8001068 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e026      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x498>
 800373a:	e01e      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e019      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_OscConfig+0x500>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	429a      	cmp	r2, r3
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0d0      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d910      	bls.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4965      	ldr	r1, [pc, #404]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a52      	ldr	r2, [pc, #328]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d040      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e073      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3d      	ldr	r3, [pc, #244]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06b      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b39      	ldr	r3, [pc, #228]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4936      	ldr	r1, [pc, #216]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7fd fbf6 	bl	8001068 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fbf2 	bl	8001068 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e053      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b27      	ldr	r3, [pc, #156]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d210      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4922      	ldr	r1, [pc, #136]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	@ (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	@ (8003954 <HAL_RCC_ClockConfig+0x1cc>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <HAL_RCC_ClockConfig+0x1d0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd fb54 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000
 8003950:	08004de4 	.word	0x08004de4
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003976:	4b1e      	ldr	r3, [pc, #120]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x30>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x36>
 800398a:	e027      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800398e:	613b      	str	r3, [r7, #16]
      break;
 8003990:	e027      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0c9b      	lsrs	r3, r3, #18
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039aa:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0c5b      	lsrs	r3, r3, #17
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	4a11      	ldr	r2, [pc, #68]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0d      	ldr	r2, [pc, #52]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e004      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	613b      	str	r3, [r7, #16]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039de:	613b      	str	r3, [r7, #16]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	693b      	ldr	r3, [r7, #16]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	007a1200 	.word	0x007a1200
 80039f8:	08004dfc 	.word	0x08004dfc
 80039fc:	08004e0c 	.word	0x08004e0c
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08004df4 	.word	0x08004df4

08003a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a48:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <RCC_Delay+0x34>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <RCC_Delay+0x38>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0a5b      	lsrs	r3, r3, #9
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a5c:	bf00      	nop
  }
  while (Delay --);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e5a      	subs	r2, r3, #1
 8003a62:	60fa      	str	r2, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f9      	bne.n	8003a5c <RCC_Delay+0x1c>
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	20000000 	.word	0x20000000
 8003a78:	10624dd3 	.word	0x10624dd3

08003a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e041      	b.n	8003b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fc ffcc 	bl	8000a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f000 fa5c 	bl	8003f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d001      	beq.n	8003b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e03a      	b.n	8003baa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	@ (8003bb4 <HAL_TIM_Base_Start_IT+0x98>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x58>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d009      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x58>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x58>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <HAL_TIM_Base_Start_IT+0xa0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d111      	bne.n	8003b98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d010      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b96:	e007      	b.n	8003ba8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800

08003bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d020      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01b      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0202 	mvn.w	r2, #2
 8003bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f998 	bl	8003f40 <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f98b 	bl	8003f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f99a 	bl	8003f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d020      	beq.n	8003c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01b      	beq.n	8003c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0204 	mvn.w	r2, #4
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f972 	bl	8003f40 <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f965 	bl	8003f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f974 	bl	8003f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d020      	beq.n	8003cbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01b      	beq.n	8003cbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0208 	mvn.w	r2, #8
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2204      	movs	r2, #4
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f94c 	bl	8003f40 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f93f 	bl	8003f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f94e 	bl	8003f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d020      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01b      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0210 	mvn.w	r2, #16
 8003cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f926 	bl	8003f40 <HAL_TIM_IC_CaptureCallback>
 8003cf4:	e005      	b.n	8003d02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f919 	bl	8003f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f928 	bl	8003f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0201 	mvn.w	r2, #1
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fc fd94 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa7f 	bl	800424e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00c      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8f8 	bl	8003f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0220 	mvn.w	r2, #32
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa52 	bl	800423c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIM_ConfigClockSource+0x1c>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e0b4      	b.n	8003f26 <HAL_TIM_ConfigClockSource+0x186>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df4:	d03e      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0xd4>
 8003df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dfa:	f200 8087 	bhi.w	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	f000 8086 	beq.w	8003f12 <HAL_TIM_ConfigClockSource+0x172>
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0a:	d87f      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b70      	cmp	r3, #112	@ 0x70
 8003e0e:	d01a      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xa6>
 8003e10:	2b70      	cmp	r3, #112	@ 0x70
 8003e12:	d87b      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b60      	cmp	r3, #96	@ 0x60
 8003e16:	d050      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x11a>
 8003e18:	2b60      	cmp	r3, #96	@ 0x60
 8003e1a:	d877      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b50      	cmp	r3, #80	@ 0x50
 8003e1e:	d03c      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xfa>
 8003e20:	2b50      	cmp	r3, #80	@ 0x50
 8003e22:	d873      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	d058      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x13a>
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d86f      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b30      	cmp	r3, #48	@ 0x30
 8003e2e:	d064      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e30:	2b30      	cmp	r3, #48	@ 0x30
 8003e32:	d86b      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d060      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d867      	bhi.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d05c      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d05a      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x15a>
 8003e44:	e062      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	f000 f974 	bl	8004142 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	609a      	str	r2, [r3, #8]
      break;
 8003e72:	e04f      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e84:	f000 f95d 	bl	8004142 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e96:	609a      	str	r2, [r3, #8]
      break;
 8003e98:	e03c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f000 f8d4 	bl	8004054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2150      	movs	r1, #80	@ 0x50
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f92b 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003eb8:	e02c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 f8f2 	bl	80040b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2160      	movs	r1, #96	@ 0x60
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f91b 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e01c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f000 f8b4 	bl	8004054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2140      	movs	r1, #64	@ 0x40
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f90b 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003ef8:	e00c      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f000 f902 	bl	800410e <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e003      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e000      	b.n	8003f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
	...

08003f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004048 <TIM_Base_SetConfig+0xd0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <TIM_Base_SetConfig+0x30>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f96:	d007      	beq.n	8003fa8 <TIM_Base_SetConfig+0x30>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800404c <TIM_Base_SetConfig+0xd4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_Base_SetConfig+0x30>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8004050 <TIM_Base_SetConfig+0xd8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a22      	ldr	r2, [pc, #136]	@ (8004048 <TIM_Base_SetConfig+0xd0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_Base_SetConfig+0x62>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc8:	d007      	beq.n	8003fda <TIM_Base_SetConfig+0x62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <TIM_Base_SetConfig+0xd4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_Base_SetConfig+0x62>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <TIM_Base_SetConfig+0xd8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d108      	bne.n	8003fec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a0d      	ldr	r2, [pc, #52]	@ (8004048 <TIM_Base_SetConfig+0xd0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d103      	bne.n	8004020 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	611a      	str	r2, [r3, #16]
  }
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800

08004054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800407e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 030a 	bic.w	r3, r3, #10
 8004090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0210 	bic.w	r2, r3, #16
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	031b      	lsls	r3, r3, #12
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	621a      	str	r2, [r3, #32]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	f043 0307 	orr.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800415c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	021a      	lsls	r2, r3, #8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	431a      	orrs	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4313      	orrs	r3, r2
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	609a      	str	r2, [r3, #8]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e046      	b.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a16      	ldr	r2, [pc, #88]	@ (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e4:	d009      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10c      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	4313      	orrs	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800

0800423c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <TMP100_CheckStatus>:
 * @brief check if the device is present or not on the i2c bus
 * @param hi2c pointer to the handle to I2C
 * @retval TMP100 Status
 * */
TMP100_STATUS TMP100_CheckStatus(I2C_HandleTypeDef *hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    TMP100_STATUS retStatus = TMP_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]

    for (uint8_t attempt = 0; attempt < TMP100_I2C_RETRIES ; attempt++) {
 800426c:	2300      	movs	r3, #0
 800426e:	73bb      	strb	r3, [r7, #14]
 8004270:	e012      	b.n	8004298 <TMP100_CheckStatus+0x38>
        if (HAL_I2C_IsDeviceReady(hi2c, TMP100_I2C_ADDR, 3, HAL_MAX_DELAY) == HAL_OK) {
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	2203      	movs	r2, #3
 8004278:	2190      	movs	r1, #144	@ 0x90
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fe f9d0 	bl	8002620 <HAL_I2C_IsDeviceReady>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <TMP100_CheckStatus+0x2c>
            retStatus = TMP_READY;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
            break;
 800428a:	e008      	b.n	800429e <TMP100_CheckStatus+0x3e>
        }
        HAL_Delay(TMP100_RETRY_DELAY_MS);  // delay between retries
 800428c:	200a      	movs	r0, #10
 800428e:	f7fc fef5 	bl	800107c <HAL_Delay>
    for (uint8_t attempt = 0; attempt < TMP100_I2C_RETRIES ; attempt++) {
 8004292:	7bbb      	ldrb	r3, [r7, #14]
 8004294:	3301      	adds	r3, #1
 8004296:	73bb      	strb	r3, [r7, #14]
 8004298:	7bbb      	ldrb	r3, [r7, #14]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d9e9      	bls.n	8004272 <TMP100_CheckStatus+0x12>
    }

    return retStatus;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <TMP100_ReadTemperature_OneShot>:
 *@param[1] hi2c pointer to the handle to I2C
 *@param[2] float readVal used to return the read value
 *@retval TMP100 Status
 * */
TMP100_STATUS TMP100_ReadTemperature_OneShot(I2C_HandleTypeDef *hi2c, float *readVal)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af04      	add	r7, sp, #16
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
    uint8_t config;
    // Valid raw range: 0x800 (−55°C) to 0x7FF (+127°C)

    // Seting shutdown + 12-bit resolution
    config = TMP100_CONFIG_SHUTDOWN_12BIT;
 80042b2:	23a0      	movs	r3, #160	@ 0xa0
 80042b4:	747b      	strb	r3, [r7, #17]
    if(HAL_I2C_Mem_Write(hi2c, TMP100_I2C_ADDR, TMP100_CONFIG_REG, 1, &config, 1, HAL_MAX_DELAY) != HAL_OK){
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ba:	9302      	str	r3, [sp, #8]
 80042bc:	2301      	movs	r3, #1
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	f107 0311 	add.w	r3, r7, #17
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	2301      	movs	r3, #1
 80042c8:	2201      	movs	r2, #1
 80042ca:	2190      	movs	r1, #144	@ 0x90
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fd fe39 	bl	8001f44 <HAL_I2C_Mem_Write>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <TMP100_ReadTemperature_OneShot+0x34>
    	return TMP_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e076      	b.n	80043ca <TMP100_ReadTemperature_OneShot+0x122>
    }
    // Triggering one-shot conversion
    config = TMP100_CONFIG_ONESHOT_12BIT;
 80042dc:	23e0      	movs	r3, #224	@ 0xe0
 80042de:	747b      	strb	r3, [r7, #17]
    if(HAL_I2C_Mem_Write(hi2c, TMP100_I2C_ADDR, TMP100_CONFIG_REG, 1, &config, 1, HAL_MAX_DELAY) != HAL_OK){
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	2301      	movs	r3, #1
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	f107 0311 	add.w	r3, r7, #17
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2301      	movs	r3, #1
 80042f2:	2201      	movs	r2, #1
 80042f4:	2190      	movs	r1, #144	@ 0x90
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd fe24 	bl	8001f44 <HAL_I2C_Mem_Write>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <TMP100_ReadTemperature_OneShot+0x5e>
    	return TMP_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e061      	b.n	80043ca <TMP100_ReadTemperature_OneShot+0x122>
    }
    // Waiting for conversion (max 600ms for 12-bit)
    //HAL_Delay(600);

    //Poll OS bit until cleared or conversion complete is detected
	uint32_t tickStart = HAL_GetTick();
 8004306:	f7fc feaf 	bl	8001068 <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]
	do {
		if(HAL_I2C_Mem_Read(hi2c, TMP100_I2C_ADDR, TMP100_CONFIG_REG, 1, &config, 1, HAL_MAX_DELAY) != HAL_OK){
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	2301      	movs	r3, #1
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	f107 0311 	add.w	r3, r7, #17
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2301      	movs	r3, #1
 800431e:	2201      	movs	r2, #1
 8004320:	2190      	movs	r1, #144	@ 0x90
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd ff08 	bl	8002138 <HAL_I2C_Mem_Read>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <TMP100_ReadTemperature_OneShot+0x8a>
			return TMP_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e04b      	b.n	80043ca <TMP100_ReadTemperature_OneShot+0x122>
		}

		if ((HAL_GetTick() - tickStart) > TMP100_CONV_TIMEOUT_MS) {
 8004332:	f7fc fe99 	bl	8001068 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004340:	d901      	bls.n	8004346 <TMP100_ReadTemperature_OneShot+0x9e>
			return TMP_TIMEOUT;
 8004342:	2302      	movs	r3, #2
 8004344:	e041      	b.n	80043ca <TMP100_ReadTemperature_OneShot+0x122>
		}
	} while (config & TMP100_OS_BIT_MASK);  // Wait until OS=0
 8004346:	7c7b      	ldrb	r3, [r7, #17]
 8004348:	b25b      	sxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	dbde      	blt.n	800430c <TMP100_ReadTemperature_OneShot+0x64>

    // Read temperature
    uint8_t temp_reg = TMP100_TEMP_REG;
 800434e:	2300      	movs	r3, #0
 8004350:	743b      	strb	r3, [r7, #16]
    uint8_t data[2];
    if(HAL_I2C_Master_Transmit(hi2c, TMP100_I2C_ADDR, &temp_reg, 1, HAL_MAX_DELAY) != HAL_OK){
 8004352:	f107 0210 	add.w	r2, r7, #16
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2301      	movs	r3, #1
 800435e:	2190      	movs	r1, #144	@ 0x90
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fd fa85 	bl	8001870 <HAL_I2C_Master_Transmit>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <TMP100_ReadTemperature_OneShot+0xc8>
    	return TMP_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e02c      	b.n	80043ca <TMP100_ReadTemperature_OneShot+0x122>
	}
    if(HAL_I2C_Master_Receive(hi2c, TMP100_I2C_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK){
 8004370:	f107 020c 	add.w	r2, r7, #12
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2302      	movs	r3, #2
 800437c:	2190      	movs	r1, #144	@ 0x90
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fd fb74 	bl	8001a6c <HAL_I2C_Master_Receive>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <TMP100_ReadTemperature_OneShot+0xe6>
    	return TMP_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e01d      	b.n	80043ca <TMP100_ReadTemperature_OneShot+0x122>
    }

    int16_t raw = (data[0] << 4) | (data[1] >> 4);
 800438e:	7b3b      	ldrb	r3, [r7, #12]
 8004390:	b21b      	sxth	r3, r3
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	b21a      	sxth	r2, r3
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	b2db      	uxtb	r3, r3
 800439c:	b21b      	sxth	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	827b      	strh	r3, [r7, #18]

    *readVal = TMP100_ConvertRawTemp(raw);
 80043a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f816 	bl	80043d8 <TMP100_ConvertRawTemp>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	601a      	str	r2, [r3, #0]
    if(*readVal == TMP100_INVALID_TEMP){
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4907      	ldr	r1, [pc, #28]	@ (80043d4 <TMP100_ReadTemperature_OneShot+0x12c>)
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fc f8cd 	bl	8000558 <__aeabi_fcmpeq>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <TMP100_ReadTemperature_OneShot+0x120>
    	return TMP_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <TMP100_ReadTemperature_OneShot+0x122>
    }
    return TMP_READY;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	c47a0000 	.word	0xc47a0000

080043d8 <TMP100_ConvertRawTemp>:
/*
 *@brief Static function to calculate the temp value from raw values
 *@param int16 raw value to be converted into float val
 *@retval return the converted float value
 * */
static float TMP100_ConvertRawTemp(int16_t raw){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]

	//checking for the signed bit before copying the 12bit number to 16bit
    if (raw & 0x800) raw |= 0xF000;
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <TMP100_ConvertRawTemp+0x20>
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80043f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80043f6:	80fb      	strh	r3, [r7, #6]

    float temp = raw * 0.0625f;
 80043f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc f813 	bl	8000428 <__aeabi_i2f>
 8004402:	4603      	mov	r3, r0
 8004404:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8004408:	4618      	mov	r0, r3
 800440a:	f7fb fe9f 	bl	800014c <__aeabi_fmul>
 800440e:	4603      	mov	r3, r0
 8004410:	60fb      	str	r3, [r7, #12]
    if (temp < -55.0f || temp > 125.0f){
 8004412:	490a      	ldr	r1, [pc, #40]	@ (800443c <TMP100_ConvertRawTemp+0x64>)
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7fc f8a9 	bl	800056c <__aeabi_fcmplt>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <TMP100_ConvertRawTemp+0x56>
 8004420:	4907      	ldr	r1, [pc, #28]	@ (8004440 <TMP100_ConvertRawTemp+0x68>)
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7fc f8c0 	bl	80005a8 <__aeabi_fcmpgt>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <TMP100_ConvertRawTemp+0x5a>
		return TMP100_INVALID_TEMP;
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <TMP100_ConvertRawTemp+0x6c>)
 8004430:	e000      	b.n	8004434 <TMP100_ConvertRawTemp+0x5c>
    }
	return temp;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	c25c0000 	.word	0xc25c0000
 8004440:	42fa0000 	.word	0x42fa0000
 8004444:	c47a0000 	.word	0xc47a0000

08004448 <std>:
 8004448:	2300      	movs	r3, #0
 800444a:	b510      	push	{r4, lr}
 800444c:	4604      	mov	r4, r0
 800444e:	e9c0 3300 	strd	r3, r3, [r0]
 8004452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004456:	6083      	str	r3, [r0, #8]
 8004458:	8181      	strh	r1, [r0, #12]
 800445a:	6643      	str	r3, [r0, #100]	@ 0x64
 800445c:	81c2      	strh	r2, [r0, #14]
 800445e:	6183      	str	r3, [r0, #24]
 8004460:	4619      	mov	r1, r3
 8004462:	2208      	movs	r2, #8
 8004464:	305c      	adds	r0, #92	@ 0x5c
 8004466:	f000 f9e7 	bl	8004838 <memset>
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <std+0x58>)
 800446c:	6224      	str	r4, [r4, #32]
 800446e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <std+0x5c>)
 8004472:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <std+0x60>)
 8004476:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004478:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <std+0x64>)
 800447a:	6323      	str	r3, [r4, #48]	@ 0x30
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <std+0x68>)
 800447e:	429c      	cmp	r4, r3
 8004480:	d006      	beq.n	8004490 <std+0x48>
 8004482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004486:	4294      	cmp	r4, r2
 8004488:	d002      	beq.n	8004490 <std+0x48>
 800448a:	33d0      	adds	r3, #208	@ 0xd0
 800448c:	429c      	cmp	r4, r3
 800448e:	d105      	bne.n	800449c <std+0x54>
 8004490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004498:	f000 ba46 	b.w	8004928 <__retarget_lock_init_recursive>
 800449c:	bd10      	pop	{r4, pc}
 800449e:	bf00      	nop
 80044a0:	08004689 	.word	0x08004689
 80044a4:	080046ab 	.word	0x080046ab
 80044a8:	080046e3 	.word	0x080046e3
 80044ac:	08004707 	.word	0x08004707
 80044b0:	2000018c 	.word	0x2000018c

080044b4 <stdio_exit_handler>:
 80044b4:	4a02      	ldr	r2, [pc, #8]	@ (80044c0 <stdio_exit_handler+0xc>)
 80044b6:	4903      	ldr	r1, [pc, #12]	@ (80044c4 <stdio_exit_handler+0x10>)
 80044b8:	4803      	ldr	r0, [pc, #12]	@ (80044c8 <stdio_exit_handler+0x14>)
 80044ba:	f000 b869 	b.w	8004590 <_fwalk_sglue>
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c
 80044c4:	08004c39 	.word	0x08004c39
 80044c8:	2000001c 	.word	0x2000001c

080044cc <cleanup_stdio>:
 80044cc:	6841      	ldr	r1, [r0, #4]
 80044ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <cleanup_stdio+0x34>)
 80044d0:	b510      	push	{r4, lr}
 80044d2:	4299      	cmp	r1, r3
 80044d4:	4604      	mov	r4, r0
 80044d6:	d001      	beq.n	80044dc <cleanup_stdio+0x10>
 80044d8:	f000 fbae 	bl	8004c38 <_fflush_r>
 80044dc:	68a1      	ldr	r1, [r4, #8]
 80044de:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <cleanup_stdio+0x38>)
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d002      	beq.n	80044ea <cleanup_stdio+0x1e>
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 fba7 	bl	8004c38 <_fflush_r>
 80044ea:	68e1      	ldr	r1, [r4, #12]
 80044ec:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <cleanup_stdio+0x3c>)
 80044ee:	4299      	cmp	r1, r3
 80044f0:	d004      	beq.n	80044fc <cleanup_stdio+0x30>
 80044f2:	4620      	mov	r0, r4
 80044f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f8:	f000 bb9e 	b.w	8004c38 <_fflush_r>
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	bf00      	nop
 8004500:	2000018c 	.word	0x2000018c
 8004504:	200001f4 	.word	0x200001f4
 8004508:	2000025c 	.word	0x2000025c

0800450c <global_stdio_init.part.0>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <global_stdio_init.part.0+0x30>)
 8004510:	4c0b      	ldr	r4, [pc, #44]	@ (8004540 <global_stdio_init.part.0+0x34>)
 8004512:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <global_stdio_init.part.0+0x38>)
 8004514:	4620      	mov	r0, r4
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	2104      	movs	r1, #4
 800451a:	2200      	movs	r2, #0
 800451c:	f7ff ff94 	bl	8004448 <std>
 8004520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004524:	2201      	movs	r2, #1
 8004526:	2109      	movs	r1, #9
 8004528:	f7ff ff8e 	bl	8004448 <std>
 800452c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004530:	2202      	movs	r2, #2
 8004532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004536:	2112      	movs	r1, #18
 8004538:	f7ff bf86 	b.w	8004448 <std>
 800453c:	200002c4 	.word	0x200002c4
 8004540:	2000018c 	.word	0x2000018c
 8004544:	080044b5 	.word	0x080044b5

08004548 <__sfp_lock_acquire>:
 8004548:	4801      	ldr	r0, [pc, #4]	@ (8004550 <__sfp_lock_acquire+0x8>)
 800454a:	f000 b9ee 	b.w	800492a <__retarget_lock_acquire_recursive>
 800454e:	bf00      	nop
 8004550:	200002cd 	.word	0x200002cd

08004554 <__sfp_lock_release>:
 8004554:	4801      	ldr	r0, [pc, #4]	@ (800455c <__sfp_lock_release+0x8>)
 8004556:	f000 b9e9 	b.w	800492c <__retarget_lock_release_recursive>
 800455a:	bf00      	nop
 800455c:	200002cd 	.word	0x200002cd

08004560 <__sinit>:
 8004560:	b510      	push	{r4, lr}
 8004562:	4604      	mov	r4, r0
 8004564:	f7ff fff0 	bl	8004548 <__sfp_lock_acquire>
 8004568:	6a23      	ldr	r3, [r4, #32]
 800456a:	b11b      	cbz	r3, 8004574 <__sinit+0x14>
 800456c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004570:	f7ff bff0 	b.w	8004554 <__sfp_lock_release>
 8004574:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <__sinit+0x28>)
 8004576:	6223      	str	r3, [r4, #32]
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <__sinit+0x2c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f5      	bne.n	800456c <__sinit+0xc>
 8004580:	f7ff ffc4 	bl	800450c <global_stdio_init.part.0>
 8004584:	e7f2      	b.n	800456c <__sinit+0xc>
 8004586:	bf00      	nop
 8004588:	080044cd 	.word	0x080044cd
 800458c:	200002c4 	.word	0x200002c4

08004590 <_fwalk_sglue>:
 8004590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004594:	4607      	mov	r7, r0
 8004596:	4688      	mov	r8, r1
 8004598:	4614      	mov	r4, r2
 800459a:	2600      	movs	r6, #0
 800459c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045a0:	f1b9 0901 	subs.w	r9, r9, #1
 80045a4:	d505      	bpl.n	80045b2 <_fwalk_sglue+0x22>
 80045a6:	6824      	ldr	r4, [r4, #0]
 80045a8:	2c00      	cmp	r4, #0
 80045aa:	d1f7      	bne.n	800459c <_fwalk_sglue+0xc>
 80045ac:	4630      	mov	r0, r6
 80045ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b2:	89ab      	ldrh	r3, [r5, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d907      	bls.n	80045c8 <_fwalk_sglue+0x38>
 80045b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045bc:	3301      	adds	r3, #1
 80045be:	d003      	beq.n	80045c8 <_fwalk_sglue+0x38>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4638      	mov	r0, r7
 80045c4:	47c0      	blx	r8
 80045c6:	4306      	orrs	r6, r0
 80045c8:	3568      	adds	r5, #104	@ 0x68
 80045ca:	e7e9      	b.n	80045a0 <_fwalk_sglue+0x10>

080045cc <_puts_r>:
 80045cc:	6a03      	ldr	r3, [r0, #32]
 80045ce:	b570      	push	{r4, r5, r6, lr}
 80045d0:	4605      	mov	r5, r0
 80045d2:	460e      	mov	r6, r1
 80045d4:	6884      	ldr	r4, [r0, #8]
 80045d6:	b90b      	cbnz	r3, 80045dc <_puts_r+0x10>
 80045d8:	f7ff ffc2 	bl	8004560 <__sinit>
 80045dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045de:	07db      	lsls	r3, r3, #31
 80045e0:	d405      	bmi.n	80045ee <_puts_r+0x22>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	0598      	lsls	r0, r3, #22
 80045e6:	d402      	bmi.n	80045ee <_puts_r+0x22>
 80045e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ea:	f000 f99e 	bl	800492a <__retarget_lock_acquire_recursive>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	0719      	lsls	r1, r3, #28
 80045f2:	d502      	bpl.n	80045fa <_puts_r+0x2e>
 80045f4:	6923      	ldr	r3, [r4, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d135      	bne.n	8004666 <_puts_r+0x9a>
 80045fa:	4621      	mov	r1, r4
 80045fc:	4628      	mov	r0, r5
 80045fe:	f000 f8c5 	bl	800478c <__swsetup_r>
 8004602:	b380      	cbz	r0, 8004666 <_puts_r+0x9a>
 8004604:	f04f 35ff 	mov.w	r5, #4294967295
 8004608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800460a:	07da      	lsls	r2, r3, #31
 800460c:	d405      	bmi.n	800461a <_puts_r+0x4e>
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	059b      	lsls	r3, r3, #22
 8004612:	d402      	bmi.n	800461a <_puts_r+0x4e>
 8004614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004616:	f000 f989 	bl	800492c <__retarget_lock_release_recursive>
 800461a:	4628      	mov	r0, r5
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	2b00      	cmp	r3, #0
 8004620:	da04      	bge.n	800462c <_puts_r+0x60>
 8004622:	69a2      	ldr	r2, [r4, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	dc17      	bgt.n	8004658 <_puts_r+0x8c>
 8004628:	290a      	cmp	r1, #10
 800462a:	d015      	beq.n	8004658 <_puts_r+0x8c>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	6022      	str	r2, [r4, #0]
 8004632:	7019      	strb	r1, [r3, #0]
 8004634:	68a3      	ldr	r3, [r4, #8]
 8004636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800463a:	3b01      	subs	r3, #1
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	2900      	cmp	r1, #0
 8004640:	d1ed      	bne.n	800461e <_puts_r+0x52>
 8004642:	2b00      	cmp	r3, #0
 8004644:	da11      	bge.n	800466a <_puts_r+0x9e>
 8004646:	4622      	mov	r2, r4
 8004648:	210a      	movs	r1, #10
 800464a:	4628      	mov	r0, r5
 800464c:	f000 f85f 	bl	800470e <__swbuf_r>
 8004650:	3001      	adds	r0, #1
 8004652:	d0d7      	beq.n	8004604 <_puts_r+0x38>
 8004654:	250a      	movs	r5, #10
 8004656:	e7d7      	b.n	8004608 <_puts_r+0x3c>
 8004658:	4622      	mov	r2, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f857 	bl	800470e <__swbuf_r>
 8004660:	3001      	adds	r0, #1
 8004662:	d1e7      	bne.n	8004634 <_puts_r+0x68>
 8004664:	e7ce      	b.n	8004604 <_puts_r+0x38>
 8004666:	3e01      	subs	r6, #1
 8004668:	e7e4      	b.n	8004634 <_puts_r+0x68>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	6022      	str	r2, [r4, #0]
 8004670:	220a      	movs	r2, #10
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e7ee      	b.n	8004654 <_puts_r+0x88>
	...

08004678 <puts>:
 8004678:	4b02      	ldr	r3, [pc, #8]	@ (8004684 <puts+0xc>)
 800467a:	4601      	mov	r1, r0
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f7ff bfa5 	b.w	80045cc <_puts_r>
 8004682:	bf00      	nop
 8004684:	20000018 	.word	0x20000018

08004688 <__sread>:
 8004688:	b510      	push	{r4, lr}
 800468a:	460c      	mov	r4, r1
 800468c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004690:	f000 f8fc 	bl	800488c <_read_r>
 8004694:	2800      	cmp	r0, #0
 8004696:	bfab      	itete	ge
 8004698:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800469a:	89a3      	ldrhlt	r3, [r4, #12]
 800469c:	181b      	addge	r3, r3, r0
 800469e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046a2:	bfac      	ite	ge
 80046a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046a6:	81a3      	strhlt	r3, [r4, #12]
 80046a8:	bd10      	pop	{r4, pc}

080046aa <__swrite>:
 80046aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ae:	461f      	mov	r7, r3
 80046b0:	898b      	ldrh	r3, [r1, #12]
 80046b2:	4605      	mov	r5, r0
 80046b4:	05db      	lsls	r3, r3, #23
 80046b6:	460c      	mov	r4, r1
 80046b8:	4616      	mov	r6, r2
 80046ba:	d505      	bpl.n	80046c8 <__swrite+0x1e>
 80046bc:	2302      	movs	r3, #2
 80046be:	2200      	movs	r2, #0
 80046c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c4:	f000 f8d0 	bl	8004868 <_lseek_r>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	4632      	mov	r2, r6
 80046cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	4628      	mov	r0, r5
 80046d4:	463b      	mov	r3, r7
 80046d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046de:	f000 b8e7 	b.w	80048b0 <_write_r>

080046e2 <__sseek>:
 80046e2:	b510      	push	{r4, lr}
 80046e4:	460c      	mov	r4, r1
 80046e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ea:	f000 f8bd 	bl	8004868 <_lseek_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	bf15      	itete	ne
 80046f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046fe:	81a3      	strheq	r3, [r4, #12]
 8004700:	bf18      	it	ne
 8004702:	81a3      	strhne	r3, [r4, #12]
 8004704:	bd10      	pop	{r4, pc}

08004706 <__sclose>:
 8004706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470a:	f000 b89d 	b.w	8004848 <_close_r>

0800470e <__swbuf_r>:
 800470e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004710:	460e      	mov	r6, r1
 8004712:	4614      	mov	r4, r2
 8004714:	4605      	mov	r5, r0
 8004716:	b118      	cbz	r0, 8004720 <__swbuf_r+0x12>
 8004718:	6a03      	ldr	r3, [r0, #32]
 800471a:	b90b      	cbnz	r3, 8004720 <__swbuf_r+0x12>
 800471c:	f7ff ff20 	bl	8004560 <__sinit>
 8004720:	69a3      	ldr	r3, [r4, #24]
 8004722:	60a3      	str	r3, [r4, #8]
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	071a      	lsls	r2, r3, #28
 8004728:	d501      	bpl.n	800472e <__swbuf_r+0x20>
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	b943      	cbnz	r3, 8004740 <__swbuf_r+0x32>
 800472e:	4621      	mov	r1, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f000 f82b 	bl	800478c <__swsetup_r>
 8004736:	b118      	cbz	r0, 8004740 <__swbuf_r+0x32>
 8004738:	f04f 37ff 	mov.w	r7, #4294967295
 800473c:	4638      	mov	r0, r7
 800473e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	6922      	ldr	r2, [r4, #16]
 8004744:	b2f6      	uxtb	r6, r6
 8004746:	1a98      	subs	r0, r3, r2
 8004748:	6963      	ldr	r3, [r4, #20]
 800474a:	4637      	mov	r7, r6
 800474c:	4283      	cmp	r3, r0
 800474e:	dc05      	bgt.n	800475c <__swbuf_r+0x4e>
 8004750:	4621      	mov	r1, r4
 8004752:	4628      	mov	r0, r5
 8004754:	f000 fa70 	bl	8004c38 <_fflush_r>
 8004758:	2800      	cmp	r0, #0
 800475a:	d1ed      	bne.n	8004738 <__swbuf_r+0x2a>
 800475c:	68a3      	ldr	r3, [r4, #8]
 800475e:	3b01      	subs	r3, #1
 8004760:	60a3      	str	r3, [r4, #8]
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	6022      	str	r2, [r4, #0]
 8004768:	701e      	strb	r6, [r3, #0]
 800476a:	6962      	ldr	r2, [r4, #20]
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	429a      	cmp	r2, r3
 8004770:	d004      	beq.n	800477c <__swbuf_r+0x6e>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	07db      	lsls	r3, r3, #31
 8004776:	d5e1      	bpl.n	800473c <__swbuf_r+0x2e>
 8004778:	2e0a      	cmp	r6, #10
 800477a:	d1df      	bne.n	800473c <__swbuf_r+0x2e>
 800477c:	4621      	mov	r1, r4
 800477e:	4628      	mov	r0, r5
 8004780:	f000 fa5a 	bl	8004c38 <_fflush_r>
 8004784:	2800      	cmp	r0, #0
 8004786:	d0d9      	beq.n	800473c <__swbuf_r+0x2e>
 8004788:	e7d6      	b.n	8004738 <__swbuf_r+0x2a>
	...

0800478c <__swsetup_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4b29      	ldr	r3, [pc, #164]	@ (8004834 <__swsetup_r+0xa8>)
 8004790:	4605      	mov	r5, r0
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	460c      	mov	r4, r1
 8004796:	b118      	cbz	r0, 80047a0 <__swsetup_r+0x14>
 8004798:	6a03      	ldr	r3, [r0, #32]
 800479a:	b90b      	cbnz	r3, 80047a0 <__swsetup_r+0x14>
 800479c:	f7ff fee0 	bl	8004560 <__sinit>
 80047a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047a4:	0719      	lsls	r1, r3, #28
 80047a6:	d422      	bmi.n	80047ee <__swsetup_r+0x62>
 80047a8:	06da      	lsls	r2, r3, #27
 80047aa:	d407      	bmi.n	80047bc <__swsetup_r+0x30>
 80047ac:	2209      	movs	r2, #9
 80047ae:	602a      	str	r2, [r5, #0]
 80047b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	e033      	b.n	8004824 <__swsetup_r+0x98>
 80047bc:	0758      	lsls	r0, r3, #29
 80047be:	d512      	bpl.n	80047e6 <__swsetup_r+0x5a>
 80047c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047c2:	b141      	cbz	r1, 80047d6 <__swsetup_r+0x4a>
 80047c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047c8:	4299      	cmp	r1, r3
 80047ca:	d002      	beq.n	80047d2 <__swsetup_r+0x46>
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f8bd 	bl	800494c <_free_r>
 80047d2:	2300      	movs	r3, #0
 80047d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	2300      	movs	r3, #0
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	b94b      	cbnz	r3, 8004806 <__swsetup_r+0x7a>
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047fc:	d003      	beq.n	8004806 <__swsetup_r+0x7a>
 80047fe:	4621      	mov	r1, r4
 8004800:	4628      	mov	r0, r5
 8004802:	f000 fa66 	bl	8004cd2 <__smakebuf_r>
 8004806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480a:	f013 0201 	ands.w	r2, r3, #1
 800480e:	d00a      	beq.n	8004826 <__swsetup_r+0x9a>
 8004810:	2200      	movs	r2, #0
 8004812:	60a2      	str	r2, [r4, #8]
 8004814:	6962      	ldr	r2, [r4, #20]
 8004816:	4252      	negs	r2, r2
 8004818:	61a2      	str	r2, [r4, #24]
 800481a:	6922      	ldr	r2, [r4, #16]
 800481c:	b942      	cbnz	r2, 8004830 <__swsetup_r+0xa4>
 800481e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004822:	d1c5      	bne.n	80047b0 <__swsetup_r+0x24>
 8004824:	bd38      	pop	{r3, r4, r5, pc}
 8004826:	0799      	lsls	r1, r3, #30
 8004828:	bf58      	it	pl
 800482a:	6962      	ldrpl	r2, [r4, #20]
 800482c:	60a2      	str	r2, [r4, #8]
 800482e:	e7f4      	b.n	800481a <__swsetup_r+0x8e>
 8004830:	2000      	movs	r0, #0
 8004832:	e7f7      	b.n	8004824 <__swsetup_r+0x98>
 8004834:	20000018 	.word	0x20000018

08004838 <memset>:
 8004838:	4603      	mov	r3, r0
 800483a:	4402      	add	r2, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <_close_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	2300      	movs	r3, #0
 800484c:	4d05      	ldr	r5, [pc, #20]	@ (8004864 <_close_r+0x1c>)
 800484e:	4604      	mov	r4, r0
 8004850:	4608      	mov	r0, r1
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	f7fc f987 	bl	8000b66 <_close>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_close_r+0x1a>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_close_r+0x1a>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	200002c8 	.word	0x200002c8

08004868 <_lseek_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	4608      	mov	r0, r1
 800486e:	4611      	mov	r1, r2
 8004870:	2200      	movs	r2, #0
 8004872:	4d05      	ldr	r5, [pc, #20]	@ (8004888 <_lseek_r+0x20>)
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fc f999 	bl	8000bae <_lseek>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_lseek_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_lseek_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200002c8 	.word	0x200002c8

0800488c <_read_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	2200      	movs	r2, #0
 8004896:	4d05      	ldr	r5, [pc, #20]	@ (80048ac <_read_r+0x20>)
 8004898:	602a      	str	r2, [r5, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f7fc f92a 	bl	8000af4 <_read>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_read_r+0x1e>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_read_r+0x1e>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	200002c8 	.word	0x200002c8

080048b0 <_write_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	2200      	movs	r2, #0
 80048ba:	4d05      	ldr	r5, [pc, #20]	@ (80048d0 <_write_r+0x20>)
 80048bc:	602a      	str	r2, [r5, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f7fc f935 	bl	8000b2e <_write>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_write_r+0x1e>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_write_r+0x1e>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	200002c8 	.word	0x200002c8

080048d4 <__errno>:
 80048d4:	4b01      	ldr	r3, [pc, #4]	@ (80048dc <__errno+0x8>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000018 	.word	0x20000018

080048e0 <__libc_init_array>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	2600      	movs	r6, #0
 80048e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004918 <__libc_init_array+0x38>)
 80048e6:	4c0d      	ldr	r4, [pc, #52]	@ (800491c <__libc_init_array+0x3c>)
 80048e8:	1b64      	subs	r4, r4, r5
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	42a6      	cmp	r6, r4
 80048ee:	d109      	bne.n	8004904 <__libc_init_array+0x24>
 80048f0:	f000 fa5e 	bl	8004db0 <_init>
 80048f4:	2600      	movs	r6, #0
 80048f6:	4d0a      	ldr	r5, [pc, #40]	@ (8004920 <__libc_init_array+0x40>)
 80048f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004924 <__libc_init_array+0x44>)
 80048fa:	1b64      	subs	r4, r4, r5
 80048fc:	10a4      	asrs	r4, r4, #2
 80048fe:	42a6      	cmp	r6, r4
 8004900:	d105      	bne.n	800490e <__libc_init_array+0x2e>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	f855 3b04 	ldr.w	r3, [r5], #4
 8004908:	4798      	blx	r3
 800490a:	3601      	adds	r6, #1
 800490c:	e7ee      	b.n	80048ec <__libc_init_array+0xc>
 800490e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004912:	4798      	blx	r3
 8004914:	3601      	adds	r6, #1
 8004916:	e7f2      	b.n	80048fe <__libc_init_array+0x1e>
 8004918:	08004e10 	.word	0x08004e10
 800491c:	08004e10 	.word	0x08004e10
 8004920:	08004e10 	.word	0x08004e10
 8004924:	08004e14 	.word	0x08004e14

08004928 <__retarget_lock_init_recursive>:
 8004928:	4770      	bx	lr

0800492a <__retarget_lock_acquire_recursive>:
 800492a:	4770      	bx	lr

0800492c <__retarget_lock_release_recursive>:
 800492c:	4770      	bx	lr

0800492e <memcpy>:
 800492e:	440a      	add	r2, r1
 8004930:	4291      	cmp	r1, r2
 8004932:	f100 33ff 	add.w	r3, r0, #4294967295
 8004936:	d100      	bne.n	800493a <memcpy+0xc>
 8004938:	4770      	bx	lr
 800493a:	b510      	push	{r4, lr}
 800493c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004940:	4291      	cmp	r1, r2
 8004942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004946:	d1f9      	bne.n	800493c <memcpy+0xe>
 8004948:	bd10      	pop	{r4, pc}
	...

0800494c <_free_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4605      	mov	r5, r0
 8004950:	2900      	cmp	r1, #0
 8004952:	d040      	beq.n	80049d6 <_free_r+0x8a>
 8004954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004958:	1f0c      	subs	r4, r1, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfb8      	it	lt
 800495e:	18e4      	addlt	r4, r4, r3
 8004960:	f000 f8de 	bl	8004b20 <__malloc_lock>
 8004964:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <_free_r+0x8c>)
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	b933      	cbnz	r3, 8004978 <_free_r+0x2c>
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	6014      	str	r4, [r2, #0]
 800496e:	4628      	mov	r0, r5
 8004970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004974:	f000 b8da 	b.w	8004b2c <__malloc_unlock>
 8004978:	42a3      	cmp	r3, r4
 800497a:	d908      	bls.n	800498e <_free_r+0x42>
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	1821      	adds	r1, r4, r0
 8004980:	428b      	cmp	r3, r1
 8004982:	bf01      	itttt	eq
 8004984:	6819      	ldreq	r1, [r3, #0]
 8004986:	685b      	ldreq	r3, [r3, #4]
 8004988:	1809      	addeq	r1, r1, r0
 800498a:	6021      	streq	r1, [r4, #0]
 800498c:	e7ed      	b.n	800496a <_free_r+0x1e>
 800498e:	461a      	mov	r2, r3
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b10b      	cbz	r3, 8004998 <_free_r+0x4c>
 8004994:	42a3      	cmp	r3, r4
 8004996:	d9fa      	bls.n	800498e <_free_r+0x42>
 8004998:	6811      	ldr	r1, [r2, #0]
 800499a:	1850      	adds	r0, r2, r1
 800499c:	42a0      	cmp	r0, r4
 800499e:	d10b      	bne.n	80049b8 <_free_r+0x6c>
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	4401      	add	r1, r0
 80049a4:	1850      	adds	r0, r2, r1
 80049a6:	4283      	cmp	r3, r0
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	d1e0      	bne.n	800496e <_free_r+0x22>
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4408      	add	r0, r1
 80049b2:	6010      	str	r0, [r2, #0]
 80049b4:	6053      	str	r3, [r2, #4]
 80049b6:	e7da      	b.n	800496e <_free_r+0x22>
 80049b8:	d902      	bls.n	80049c0 <_free_r+0x74>
 80049ba:	230c      	movs	r3, #12
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	e7d6      	b.n	800496e <_free_r+0x22>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	1821      	adds	r1, r4, r0
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf01      	itttt	eq
 80049c8:	6819      	ldreq	r1, [r3, #0]
 80049ca:	685b      	ldreq	r3, [r3, #4]
 80049cc:	1809      	addeq	r1, r1, r0
 80049ce:	6021      	streq	r1, [r4, #0]
 80049d0:	6063      	str	r3, [r4, #4]
 80049d2:	6054      	str	r4, [r2, #4]
 80049d4:	e7cb      	b.n	800496e <_free_r+0x22>
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	200002d4 	.word	0x200002d4

080049dc <sbrk_aligned>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4e0f      	ldr	r6, [pc, #60]	@ (8004a1c <sbrk_aligned+0x40>)
 80049e0:	460c      	mov	r4, r1
 80049e2:	6831      	ldr	r1, [r6, #0]
 80049e4:	4605      	mov	r5, r0
 80049e6:	b911      	cbnz	r1, 80049ee <sbrk_aligned+0x12>
 80049e8:	f000 f9d2 	bl	8004d90 <_sbrk_r>
 80049ec:	6030      	str	r0, [r6, #0]
 80049ee:	4621      	mov	r1, r4
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 f9cd 	bl	8004d90 <_sbrk_r>
 80049f6:	1c43      	adds	r3, r0, #1
 80049f8:	d103      	bne.n	8004a02 <sbrk_aligned+0x26>
 80049fa:	f04f 34ff 	mov.w	r4, #4294967295
 80049fe:	4620      	mov	r0, r4
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	1cc4      	adds	r4, r0, #3
 8004a04:	f024 0403 	bic.w	r4, r4, #3
 8004a08:	42a0      	cmp	r0, r4
 8004a0a:	d0f8      	beq.n	80049fe <sbrk_aligned+0x22>
 8004a0c:	1a21      	subs	r1, r4, r0
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f000 f9be 	bl	8004d90 <_sbrk_r>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d1f2      	bne.n	80049fe <sbrk_aligned+0x22>
 8004a18:	e7ef      	b.n	80049fa <sbrk_aligned+0x1e>
 8004a1a:	bf00      	nop
 8004a1c:	200002d0 	.word	0x200002d0

08004a20 <_malloc_r>:
 8004a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a24:	1ccd      	adds	r5, r1, #3
 8004a26:	f025 0503 	bic.w	r5, r5, #3
 8004a2a:	3508      	adds	r5, #8
 8004a2c:	2d0c      	cmp	r5, #12
 8004a2e:	bf38      	it	cc
 8004a30:	250c      	movcc	r5, #12
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	4606      	mov	r6, r0
 8004a36:	db01      	blt.n	8004a3c <_malloc_r+0x1c>
 8004a38:	42a9      	cmp	r1, r5
 8004a3a:	d904      	bls.n	8004a46 <_malloc_r+0x26>
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	2000      	movs	r0, #0
 8004a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b1c <_malloc_r+0xfc>
 8004a4a:	f000 f869 	bl	8004b20 <__malloc_lock>
 8004a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a52:	461c      	mov	r4, r3
 8004a54:	bb44      	cbnz	r4, 8004aa8 <_malloc_r+0x88>
 8004a56:	4629      	mov	r1, r5
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f7ff ffbf 	bl	80049dc <sbrk_aligned>
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	4604      	mov	r4, r0
 8004a62:	d158      	bne.n	8004b16 <_malloc_r+0xf6>
 8004a64:	f8d8 4000 	ldr.w	r4, [r8]
 8004a68:	4627      	mov	r7, r4
 8004a6a:	2f00      	cmp	r7, #0
 8004a6c:	d143      	bne.n	8004af6 <_malloc_r+0xd6>
 8004a6e:	2c00      	cmp	r4, #0
 8004a70:	d04b      	beq.n	8004b0a <_malloc_r+0xea>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	4639      	mov	r1, r7
 8004a76:	4630      	mov	r0, r6
 8004a78:	eb04 0903 	add.w	r9, r4, r3
 8004a7c:	f000 f988 	bl	8004d90 <_sbrk_r>
 8004a80:	4581      	cmp	r9, r0
 8004a82:	d142      	bne.n	8004b0a <_malloc_r+0xea>
 8004a84:	6821      	ldr	r1, [r4, #0]
 8004a86:	4630      	mov	r0, r6
 8004a88:	1a6d      	subs	r5, r5, r1
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f7ff ffa6 	bl	80049dc <sbrk_aligned>
 8004a90:	3001      	adds	r0, #1
 8004a92:	d03a      	beq.n	8004b0a <_malloc_r+0xea>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	442b      	add	r3, r5
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	bb62      	cbnz	r2, 8004afc <_malloc_r+0xdc>
 8004aa2:	f8c8 7000 	str.w	r7, [r8]
 8004aa6:	e00f      	b.n	8004ac8 <_malloc_r+0xa8>
 8004aa8:	6822      	ldr	r2, [r4, #0]
 8004aaa:	1b52      	subs	r2, r2, r5
 8004aac:	d420      	bmi.n	8004af0 <_malloc_r+0xd0>
 8004aae:	2a0b      	cmp	r2, #11
 8004ab0:	d917      	bls.n	8004ae2 <_malloc_r+0xc2>
 8004ab2:	1961      	adds	r1, r4, r5
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	6025      	str	r5, [r4, #0]
 8004ab8:	bf18      	it	ne
 8004aba:	6059      	strne	r1, [r3, #4]
 8004abc:	6863      	ldr	r3, [r4, #4]
 8004abe:	bf08      	it	eq
 8004ac0:	f8c8 1000 	streq.w	r1, [r8]
 8004ac4:	5162      	str	r2, [r4, r5]
 8004ac6:	604b      	str	r3, [r1, #4]
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f82f 	bl	8004b2c <__malloc_unlock>
 8004ace:	f104 000b 	add.w	r0, r4, #11
 8004ad2:	1d23      	adds	r3, r4, #4
 8004ad4:	f020 0007 	bic.w	r0, r0, #7
 8004ad8:	1ac2      	subs	r2, r0, r3
 8004ada:	bf1c      	itt	ne
 8004adc:	1a1b      	subne	r3, r3, r0
 8004ade:	50a3      	strne	r3, [r4, r2]
 8004ae0:	e7af      	b.n	8004a42 <_malloc_r+0x22>
 8004ae2:	6862      	ldr	r2, [r4, #4]
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	bf0c      	ite	eq
 8004ae8:	f8c8 2000 	streq.w	r2, [r8]
 8004aec:	605a      	strne	r2, [r3, #4]
 8004aee:	e7eb      	b.n	8004ac8 <_malloc_r+0xa8>
 8004af0:	4623      	mov	r3, r4
 8004af2:	6864      	ldr	r4, [r4, #4]
 8004af4:	e7ae      	b.n	8004a54 <_malloc_r+0x34>
 8004af6:	463c      	mov	r4, r7
 8004af8:	687f      	ldr	r7, [r7, #4]
 8004afa:	e7b6      	b.n	8004a6a <_malloc_r+0x4a>
 8004afc:	461a      	mov	r2, r3
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	d1fb      	bne.n	8004afc <_malloc_r+0xdc>
 8004b04:	2300      	movs	r3, #0
 8004b06:	6053      	str	r3, [r2, #4]
 8004b08:	e7de      	b.n	8004ac8 <_malloc_r+0xa8>
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	f000 f80c 	bl	8004b2c <__malloc_unlock>
 8004b14:	e794      	b.n	8004a40 <_malloc_r+0x20>
 8004b16:	6005      	str	r5, [r0, #0]
 8004b18:	e7d6      	b.n	8004ac8 <_malloc_r+0xa8>
 8004b1a:	bf00      	nop
 8004b1c:	200002d4 	.word	0x200002d4

08004b20 <__malloc_lock>:
 8004b20:	4801      	ldr	r0, [pc, #4]	@ (8004b28 <__malloc_lock+0x8>)
 8004b22:	f7ff bf02 	b.w	800492a <__retarget_lock_acquire_recursive>
 8004b26:	bf00      	nop
 8004b28:	200002cc 	.word	0x200002cc

08004b2c <__malloc_unlock>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	@ (8004b34 <__malloc_unlock+0x8>)
 8004b2e:	f7ff befd 	b.w	800492c <__retarget_lock_release_recursive>
 8004b32:	bf00      	nop
 8004b34:	200002cc 	.word	0x200002cc

08004b38 <__sflush_r>:
 8004b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	0716      	lsls	r6, r2, #28
 8004b40:	4605      	mov	r5, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	d454      	bmi.n	8004bf0 <__sflush_r+0xb8>
 8004b46:	684b      	ldr	r3, [r1, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	dc02      	bgt.n	8004b52 <__sflush_r+0x1a>
 8004b4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	dd48      	ble.n	8004be4 <__sflush_r+0xac>
 8004b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b54:	2e00      	cmp	r6, #0
 8004b56:	d045      	beq.n	8004be4 <__sflush_r+0xac>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b5e:	682f      	ldr	r7, [r5, #0]
 8004b60:	6a21      	ldr	r1, [r4, #32]
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	d030      	beq.n	8004bc8 <__sflush_r+0x90>
 8004b66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	0759      	lsls	r1, r3, #29
 8004b6c:	d505      	bpl.n	8004b7a <__sflush_r+0x42>
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	1ad2      	subs	r2, r2, r3
 8004b72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b74:	b10b      	cbz	r3, 8004b7a <__sflush_r+0x42>
 8004b76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b78:	1ad2      	subs	r2, r2, r3
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b80:	6a21      	ldr	r1, [r4, #32]
 8004b82:	47b0      	blx	r6
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	d106      	bne.n	8004b98 <__sflush_r+0x60>
 8004b8a:	6829      	ldr	r1, [r5, #0]
 8004b8c:	291d      	cmp	r1, #29
 8004b8e:	d82b      	bhi.n	8004be8 <__sflush_r+0xb0>
 8004b90:	4a28      	ldr	r2, [pc, #160]	@ (8004c34 <__sflush_r+0xfc>)
 8004b92:	40ca      	lsrs	r2, r1
 8004b94:	07d6      	lsls	r6, r2, #31
 8004b96:	d527      	bpl.n	8004be8 <__sflush_r+0xb0>
 8004b98:	2200      	movs	r2, #0
 8004b9a:	6062      	str	r2, [r4, #4]
 8004b9c:	6922      	ldr	r2, [r4, #16]
 8004b9e:	04d9      	lsls	r1, r3, #19
 8004ba0:	6022      	str	r2, [r4, #0]
 8004ba2:	d504      	bpl.n	8004bae <__sflush_r+0x76>
 8004ba4:	1c42      	adds	r2, r0, #1
 8004ba6:	d101      	bne.n	8004bac <__sflush_r+0x74>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b903      	cbnz	r3, 8004bae <__sflush_r+0x76>
 8004bac:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bb0:	602f      	str	r7, [r5, #0]
 8004bb2:	b1b9      	cbz	r1, 8004be4 <__sflush_r+0xac>
 8004bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	d002      	beq.n	8004bc2 <__sflush_r+0x8a>
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f7ff fec5 	bl	800494c <_free_r>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bc6:	e00d      	b.n	8004be4 <__sflush_r+0xac>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b0      	blx	r6
 8004bce:	4602      	mov	r2, r0
 8004bd0:	1c50      	adds	r0, r2, #1
 8004bd2:	d1c9      	bne.n	8004b68 <__sflush_r+0x30>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0c6      	beq.n	8004b68 <__sflush_r+0x30>
 8004bda:	2b1d      	cmp	r3, #29
 8004bdc:	d001      	beq.n	8004be2 <__sflush_r+0xaa>
 8004bde:	2b16      	cmp	r3, #22
 8004be0:	d11d      	bne.n	8004c1e <__sflush_r+0xe6>
 8004be2:	602f      	str	r7, [r5, #0]
 8004be4:	2000      	movs	r0, #0
 8004be6:	e021      	b.n	8004c2c <__sflush_r+0xf4>
 8004be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	e01a      	b.n	8004c26 <__sflush_r+0xee>
 8004bf0:	690f      	ldr	r7, [r1, #16]
 8004bf2:	2f00      	cmp	r7, #0
 8004bf4:	d0f6      	beq.n	8004be4 <__sflush_r+0xac>
 8004bf6:	0793      	lsls	r3, r2, #30
 8004bf8:	bf18      	it	ne
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	680e      	ldr	r6, [r1, #0]
 8004bfe:	bf08      	it	eq
 8004c00:	694b      	ldreq	r3, [r1, #20]
 8004c02:	1bf6      	subs	r6, r6, r7
 8004c04:	600f      	str	r7, [r1, #0]
 8004c06:	608b      	str	r3, [r1, #8]
 8004c08:	2e00      	cmp	r6, #0
 8004c0a:	ddeb      	ble.n	8004be4 <__sflush_r+0xac>
 8004c0c:	4633      	mov	r3, r6
 8004c0e:	463a      	mov	r2, r7
 8004c10:	4628      	mov	r0, r5
 8004c12:	6a21      	ldr	r1, [r4, #32]
 8004c14:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c18:	47e0      	blx	ip
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	dc07      	bgt.n	8004c2e <__sflush_r+0xf6>
 8004c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c26:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c2e:	4407      	add	r7, r0
 8004c30:	1a36      	subs	r6, r6, r0
 8004c32:	e7e9      	b.n	8004c08 <__sflush_r+0xd0>
 8004c34:	20400001 	.word	0x20400001

08004c38 <_fflush_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	690b      	ldr	r3, [r1, #16]
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	b913      	cbnz	r3, 8004c48 <_fflush_r+0x10>
 8004c42:	2500      	movs	r5, #0
 8004c44:	4628      	mov	r0, r5
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	b118      	cbz	r0, 8004c52 <_fflush_r+0x1a>
 8004c4a:	6a03      	ldr	r3, [r0, #32]
 8004c4c:	b90b      	cbnz	r3, 8004c52 <_fflush_r+0x1a>
 8004c4e:	f7ff fc87 	bl	8004560 <__sinit>
 8004c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f3      	beq.n	8004c42 <_fflush_r+0xa>
 8004c5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c5c:	07d0      	lsls	r0, r2, #31
 8004c5e:	d404      	bmi.n	8004c6a <_fflush_r+0x32>
 8004c60:	0599      	lsls	r1, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_fflush_r+0x32>
 8004c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c66:	f7ff fe60 	bl	800492a <__retarget_lock_acquire_recursive>
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	f7ff ff63 	bl	8004b38 <__sflush_r>
 8004c72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c74:	4605      	mov	r5, r0
 8004c76:	07da      	lsls	r2, r3, #31
 8004c78:	d4e4      	bmi.n	8004c44 <_fflush_r+0xc>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	059b      	lsls	r3, r3, #22
 8004c7e:	d4e1      	bmi.n	8004c44 <_fflush_r+0xc>
 8004c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c82:	f7ff fe53 	bl	800492c <__retarget_lock_release_recursive>
 8004c86:	e7dd      	b.n	8004c44 <_fflush_r+0xc>

08004c88 <__swhatbuf_r>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c90:	4615      	mov	r5, r2
 8004c92:	2900      	cmp	r1, #0
 8004c94:	461e      	mov	r6, r3
 8004c96:	b096      	sub	sp, #88	@ 0x58
 8004c98:	da0c      	bge.n	8004cb4 <__swhatbuf_r+0x2c>
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ca2:	bf14      	ite	ne
 8004ca4:	2340      	movne	r3, #64	@ 0x40
 8004ca6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004caa:	2000      	movs	r0, #0
 8004cac:	6031      	str	r1, [r6, #0]
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	b016      	add	sp, #88	@ 0x58
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	466a      	mov	r2, sp
 8004cb6:	f000 f849 	bl	8004d4c <_fstat_r>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	dbed      	blt.n	8004c9a <__swhatbuf_r+0x12>
 8004cbe:	9901      	ldr	r1, [sp, #4]
 8004cc0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cc4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cc8:	4259      	negs	r1, r3
 8004cca:	4159      	adcs	r1, r3
 8004ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cd0:	e7eb      	b.n	8004caa <__swhatbuf_r+0x22>

08004cd2 <__smakebuf_r>:
 8004cd2:	898b      	ldrh	r3, [r1, #12]
 8004cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd6:	079d      	lsls	r5, r3, #30
 8004cd8:	4606      	mov	r6, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	d507      	bpl.n	8004cee <__smakebuf_r+0x1c>
 8004cde:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	6163      	str	r3, [r4, #20]
 8004cea:	b003      	add	sp, #12
 8004cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cee:	466a      	mov	r2, sp
 8004cf0:	ab01      	add	r3, sp, #4
 8004cf2:	f7ff ffc9 	bl	8004c88 <__swhatbuf_r>
 8004cf6:	9f00      	ldr	r7, [sp, #0]
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f7ff fe8f 	bl	8004a20 <_malloc_r>
 8004d02:	b948      	cbnz	r0, 8004d18 <__smakebuf_r+0x46>
 8004d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d08:	059a      	lsls	r2, r3, #22
 8004d0a:	d4ee      	bmi.n	8004cea <__smakebuf_r+0x18>
 8004d0c:	f023 0303 	bic.w	r3, r3, #3
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	e7e2      	b.n	8004cde <__smakebuf_r+0xc>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d22:	81a3      	strh	r3, [r4, #12]
 8004d24:	9b01      	ldr	r3, [sp, #4]
 8004d26:	6020      	str	r0, [r4, #0]
 8004d28:	b15b      	cbz	r3, 8004d42 <__smakebuf_r+0x70>
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d30:	f000 f81e 	bl	8004d70 <_isatty_r>
 8004d34:	b128      	cbz	r0, 8004d42 <__smakebuf_r+0x70>
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	f023 0303 	bic.w	r3, r3, #3
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	81a3      	strh	r3, [r4, #12]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	431d      	orrs	r5, r3
 8004d46:	81a5      	strh	r5, [r4, #12]
 8004d48:	e7cf      	b.n	8004cea <__smakebuf_r+0x18>
	...

08004d4c <_fstat_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4d06      	ldr	r5, [pc, #24]	@ (8004d6c <_fstat_r+0x20>)
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	f7fb ff0f 	bl	8000b7c <_fstat>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	d102      	bne.n	8004d68 <_fstat_r+0x1c>
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	b103      	cbz	r3, 8004d68 <_fstat_r+0x1c>
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	bd38      	pop	{r3, r4, r5, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200002c8 	.word	0x200002c8

08004d70 <_isatty_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	2300      	movs	r3, #0
 8004d74:	4d05      	ldr	r5, [pc, #20]	@ (8004d8c <_isatty_r+0x1c>)
 8004d76:	4604      	mov	r4, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	602b      	str	r3, [r5, #0]
 8004d7c:	f7fb ff0d 	bl	8000b9a <_isatty>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_isatty_r+0x1a>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_isatty_r+0x1a>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	200002c8 	.word	0x200002c8

08004d90 <_sbrk_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	2300      	movs	r3, #0
 8004d94:	4d05      	ldr	r5, [pc, #20]	@ (8004dac <_sbrk_r+0x1c>)
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fb ff14 	bl	8000bc8 <_sbrk>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_sbrk_r+0x1a>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_sbrk_r+0x1a>
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	200002c8 	.word	0x200002c8

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
